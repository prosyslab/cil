type token =
  | IDENT of (string * Cabs.cabsloc)
  | QUALIFIER of (string * Cabs.cabsloc)
  | CST_CHAR of (int64 list * Cabs.cabsloc)
  | CST_WCHAR of (int64 list * Cabs.cabsloc)
  | CST_INT of (string * Cabs.cabsloc)
  | CST_FLOAT of (string * Cabs.cabsloc)
  | NAMED_TYPE of (string * Cabs.cabsloc)
  | CST_STRING of (int64 list * Cabs.cabsloc)
  | CST_WSTRING of (int64 list * Cabs.cabsloc)
  | EOF
  | CHAR of (Cabs.cabsloc)
  | INT of (Cabs.cabsloc)
  | BOOL of (Cabs.cabsloc)
  | DOUBLE of (Cabs.cabsloc)
  | FLOAT of (Cabs.cabsloc)
  | VOID of (Cabs.cabsloc)
  | INT64 of (Cabs.cabsloc)
  | INT32 of (Cabs.cabsloc)
  | ENUM of (Cabs.cabsloc)
  | STRUCT of (Cabs.cabsloc)
  | TYPEDEF of (Cabs.cabsloc)
  | UNION of (Cabs.cabsloc)
  | STATIC_ASSERT of (Cabs.cabsloc)
  | SIGNED of (Cabs.cabsloc)
  | UNSIGNED of (Cabs.cabsloc)
  | LONG of (Cabs.cabsloc)
  | SHORT of (Cabs.cabsloc)
  | VOLATILE of (Cabs.cabsloc)
  | EXTERN of (Cabs.cabsloc)
  | STATIC of (Cabs.cabsloc)
  | CONST of (Cabs.cabsloc)
  | RESTRICT of (Cabs.cabsloc)
  | AUTO of (Cabs.cabsloc)
  | REGISTER of (Cabs.cabsloc)
  | COMPLEX of (Cabs.cabsloc)
  | THREAD of (Cabs.cabsloc)
  | SIZEOF of (Cabs.cabsloc)
  | ALIGNOF of (Cabs.cabsloc)
  | EQ
  | PLUS_EQ
  | MINUS_EQ
  | STAR_EQ
  | SLASH_EQ
  | PERCENT_EQ
  | AND_EQ
  | PIPE_EQ
  | CIRC_EQ
  | INF_INF_EQ
  | SUP_SUP_EQ
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS of (Cabs.cabsloc)
  | MINUS of (Cabs.cabsloc)
  | STAR of (Cabs.cabsloc)
  | SLASH
  | PERCENT
  | TILDE of (Cabs.cabsloc)
  | AND of (Cabs.cabsloc)
  | PIPE
  | CIRC
  | EXCLAM of (Cabs.cabsloc)
  | AND_AND of (Cabs.cabsloc)
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS of (Cabs.cabsloc)
  | MINUS_MINUS of (Cabs.cabsloc)
  | RPAREN
  | LPAREN of (Cabs.cabsloc)
  | RBRACE of (Cabs.cabsloc)
  | LBRACE of (Cabs.cabsloc)
  | LBRACKET
  | RBRACKET
  | COLON
  | SEMICOLON of (Cabs.cabsloc)
  | COMMA
  | ELLIPSIS
  | QUEST
  | BREAK of (Cabs.cabsloc)
  | CONTINUE of (Cabs.cabsloc)
  | GOTO of (Cabs.cabsloc)
  | RETURN of (Cabs.cabsloc)
  | SWITCH of (Cabs.cabsloc)
  | CASE of (Cabs.cabsloc)
  | DEFAULT of (Cabs.cabsloc)
  | WHILE of (Cabs.cabsloc)
  | DO of (Cabs.cabsloc)
  | FOR of (Cabs.cabsloc)
  | IF of (Cabs.cabsloc)
  | TRY of (Cabs.cabsloc)
  | EXCEPT of (Cabs.cabsloc)
  | FINALLY of (Cabs.cabsloc)
  | ELSE
  | ATTRIBUTE of (Cabs.cabsloc)
  | INLINE of (Cabs.cabsloc)
  | NORETURN of (Cabs.cabsloc)
  | ASM of (Cabs.cabsloc)
  | TYPEOF of (Cabs.cabsloc)
  | FUNCTION__ of (Cabs.cabsloc)
  | PRETTY_FUNCTION__ of (Cabs.cabsloc)
  | LABEL__
  | BUILTIN_VA_ARG of (Cabs.cabsloc)
  | ATTRIBUTE_USED of (Cabs.cabsloc)
  | BUILTIN_VA_LIST
  | BLOCKATTRIBUTE
  | BUILTIN_TYPES_COMPAT of (Cabs.cabsloc)
  | BUILTIN_OFFSETOF of (Cabs.cabsloc)
  | DECLSPEC of (Cabs.cabsloc)
  | MSASM of (string * Cabs.cabsloc)
  | MSATTR of (string * Cabs.cabsloc)
  | PRAGMA_LINE of (string * Cabs.cabsloc)
  | PRAGMA of (Cabs.cabsloc)
  | PRAGMA_EOL
  | AT_TRANSFORM of (Cabs.cabsloc)
  | AT_TRANSFORMEXPR of (Cabs.cabsloc)
  | AT_SPECIFIER of (Cabs.cabsloc)
  | AT_EXPR of (Cabs.cabsloc)
  | AT_NAME

open Parsing;;
let _ = parse_error;;
# 44 "src/frontc/cparser.mly"
open Cabs
open Cabshelper
module E = Errormsg

let parse_error msg : unit =       (* sm: c++-mode highlight hack: -> ' <- *)
  E.parse_error msg

let print = print_string

(* unit -> string option *)
(*
let getComments () =
  match !comments with
    [] -> None
  | _ ->
      let r = Some(String.concat "\n" (List.rev !comments)) in
      comments := [];
      r
*)

let cabslu = {lineno = -10;
	      filename = "cabs loc unknown";
	      byteno = -10;
              ident = 0;}

(* cabsloc -> cabsloc *)
(*
let handleLoc l =
  l.clcomment <- getComments();
  l
*)

(*
** Expression building
*)
let smooth_expression lst =
  match lst with
    [] -> NOTHING
  | [expr] -> expr
  | _ -> COMMA (lst)


let currentFunctionName = ref "<outside any function>"

let announceFunctionName ((n, decl, _, _):name) =
  !Lexerhack.add_identifier n;
  (* Start a context that includes the parameter names and the whole body.
   * Will pop when we finish parsing the function body *)
  !Lexerhack.push_context ();
  (* Go through all the parameter names and mark them as identifiers *)
  let rec findProto = function
      PROTO (d, args, _) when isJUSTBASE d ->
        List.iter (fun (_, (an, _, _, _)) -> !Lexerhack.add_identifier an) args

    | PROTO (d, _, _) -> findProto d
    | PARENTYPE (_, d, _) -> findProto d
    | PTR (_, d) -> findProto d
    | ARRAY (d, _, _) -> findProto d
    | _ -> (* parse_error "Cannot find the prototype in a function definition";
           raise Parsing.Parse_error *)
            ()

  and isJUSTBASE = function
      JUSTBASE -> true
    | PARENTYPE (_, d, _) -> isJUSTBASE d
    | _ -> false
  in
  findProto decl;
  currentFunctionName := n



let applyPointer (ptspecs: attribute list list) (dt: decl_type)
       : decl_type =
  (* Outer specification first *)
  let rec loop = function
      [] -> dt
    | attrs :: rest -> PTR(attrs, loop rest)
  in
  loop ptspecs

let doDeclaration (loc: cabsloc) (specs: spec_elem list) (nl: init_name list) : definition =
  if isTypedef specs then begin
    (* Tell the lexer about the new type names *)
    List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_type n) nl;
    TYPEDEF ((specs, List.map (fun (n, _) -> n) nl), loc)
  end else
    if nl = [] then
      ONLYTYPEDEF (specs, loc)
    else begin
      (* Tell the lexer about the new variable names *)
      List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_identifier n) nl;
      DECDEF ((specs, nl), loc)
    end


let doFunctionDef (loc: cabsloc)
                  (lend: cabsloc)
                  (specs: spec_elem list)
                  (n: name)
                  (b: block) : definition =
  let fname = (specs, n) in
  FUNDEF (fname, b, loc, lend)


let doOldParDecl (names: string list)
                 ((pardefs: name_group list), (isva: bool))
    : single_name list * bool =
  let findOneName n =
    (* Search in pardefs for the definition for this parameter *)
    let rec loopGroups = function
        [] -> ([SpecType Tint], (n, JUSTBASE, [], cabslu))
      | (specs, names) :: restgroups ->
          let rec loopNames = function
              [] -> loopGroups restgroups
            | ((n',_, _, _) as sn) :: _ when n' = n -> (specs, sn)
            | _ :: restnames -> loopNames restnames
          in
          loopNames names
    in
    loopGroups pardefs
  in
  let args = List.map findOneName names in
  (args, isva)

let checkConnective (s : string) : unit =
begin
  (* checking this means I could possibly have more connectives, with *)
  (* different meaning *)
  if (s <> "to") then (
    (* parse_error "transformer connective must be 'to'";
     raise Parsing.Parse_error *)
    ()
  )
  else ()
end

let int64_to_char value =
  if (compare value (Int64.of_int 255) > 0) || (compare value Int64.zero < 0) then
    begin
      let msg = Printf.sprintf "cparser:intlist_to_string: character 0x%Lx too big" value in
      (* parse_error msg;
      raise Parsing.Parse_error *)
      ' '
    end
  else
    Char.chr (Int64.to_int value)

(* takes a not-nul-terminated list, and converts it to a string. *)
let rec intlist_to_string (str: int64 list):string =
  match str with
    [] -> ""  (* add nul-termination *)
  | value::rest ->
      let this_char = int64_to_char value in
      (String.make 1 this_char) ^ (intlist_to_string rest)

let fst3 (result, _, _) = result
let snd3 (_, result, _) = result
let trd3 (_, _, result) = result


(*
   transform:  __builtin_offsetof(type, member)
   into     :  (size_t) (&(type * ) 0)->member
 *)

let transformOffsetOf (speclist, dtype) member =
  let rec addPointer = function
    | JUSTBASE ->
	PTR([], JUSTBASE)
    | PARENTYPE (attrs1, dtype, attrs2) ->
	PARENTYPE (attrs1, addPointer dtype, attrs2)
    | ARRAY (dtype, attrs, expr) ->
	ARRAY (addPointer dtype, attrs, expr)
    | PTR (attrs, dtype) ->
	PTR (attrs, addPointer dtype)
    | PROTO (dtype, names, variadic) ->
	PROTO (addPointer dtype, names, variadic)
  in
  let nullType = (speclist, addPointer dtype) in
  let nullExpr = CONSTANT (CONST_INT "0") in
  let castExpr = CAST (nullType, SINGLE_INIT nullExpr) in

  let rec replaceBase = function
    | VARIABLE field ->
	MEMBEROFPTR (castExpr, field)
    | MEMBEROF (base, field) ->
	MEMBEROF (replaceBase base, field)
    | INDEX (base, index) ->
	INDEX (replaceBase base, index)
    | _ ->
	(* parse_error "malformed offset expression in __builtin_offsetof";
        raise Parsing.Parse_error *)
        CONSTANT (CONST_INT "0")
  in
  let memberExpr = replaceBase member in
  let addrExpr = UNARY (ADDROF, memberExpr) in
  let sizeofType = [SpecType Tsizet], JUSTBASE in
  let resultExpr = CAST (sizeofType, SINGLE_INIT addrExpr) in
  resultExpr

# 332 "src/frontc/cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  294 (* EQ *);
  295 (* PLUS_EQ *);
  296 (* MINUS_EQ *);
  297 (* STAR_EQ *);
  298 (* SLASH_EQ *);
  299 (* PERCENT_EQ *);
  300 (* AND_EQ *);
  301 (* PIPE_EQ *);
  302 (* CIRC_EQ *);
  303 (* INF_INF_EQ *);
  304 (* SUP_SUP_EQ *);
  305 (* ARROW *);
  306 (* DOT *);
  307 (* EQ_EQ *);
  308 (* EXCLAM_EQ *);
  309 (* INF *);
  310 (* SUP *);
  311 (* INF_EQ *);
  312 (* SUP_EQ *);
  316 (* SLASH *);
  317 (* PERCENT *);
  320 (* PIPE *);
  321 (* CIRC *);
  324 (* PIPE_PIPE *);
  325 (* INF_INF *);
  326 (* SUP_SUP *);
  329 (* RPAREN *);
  333 (* LBRACKET *);
  334 (* RBRACKET *);
  335 (* COLON *);
  337 (* COMMA *);
  338 (* ELLIPSIS *);
  339 (* QUEST *);
  354 (* ELSE *);
  362 (* LABEL__ *);
  365 (* BUILTIN_VA_LIST *);
  366 (* BLOCKATTRIBUTE *);
  374 (* PRAGMA_EOL *);
  379 (* AT_NAME *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* QUALIFIER *);
  259 (* CST_CHAR *);
  260 (* CST_WCHAR *);
  261 (* CST_INT *);
  262 (* CST_FLOAT *);
  263 (* NAMED_TYPE *);
  264 (* CST_STRING *);
  265 (* CST_WSTRING *);
  266 (* CHAR *);
  267 (* INT *);
  268 (* BOOL *);
  269 (* DOUBLE *);
  270 (* FLOAT *);
  271 (* VOID *);
  272 (* INT64 *);
  273 (* INT32 *);
  274 (* ENUM *);
  275 (* STRUCT *);
  276 (* TYPEDEF *);
  277 (* UNION *);
  278 (* STATIC_ASSERT *);
  279 (* SIGNED *);
  280 (* UNSIGNED *);
  281 (* LONG *);
  282 (* SHORT *);
  283 (* VOLATILE *);
  284 (* EXTERN *);
  285 (* STATIC *);
  286 (* CONST *);
  287 (* RESTRICT *);
  288 (* AUTO *);
  289 (* REGISTER *);
  290 (* COMPLEX *);
  291 (* THREAD *);
  292 (* SIZEOF *);
  293 (* ALIGNOF *);
  313 (* PLUS *);
  314 (* MINUS *);
  315 (* STAR *);
  318 (* TILDE *);
  319 (* AND *);
  322 (* EXCLAM *);
  323 (* AND_AND *);
  327 (* PLUS_PLUS *);
  328 (* MINUS_MINUS *);
  330 (* LPAREN *);
  331 (* RBRACE *);
  332 (* LBRACE *);
  336 (* SEMICOLON *);
  340 (* BREAK *);
  341 (* CONTINUE *);
  342 (* GOTO *);
  343 (* RETURN *);
  344 (* SWITCH *);
  345 (* CASE *);
  346 (* DEFAULT *);
  347 (* WHILE *);
  348 (* DO *);
  349 (* FOR *);
  350 (* IF *);
  351 (* TRY *);
  352 (* EXCEPT *);
  353 (* FINALLY *);
  355 (* ATTRIBUTE *);
  356 (* INLINE *);
  357 (* NORETURN *);
  358 (* ASM *);
  359 (* TYPEOF *);
  360 (* FUNCTION__ *);
  361 (* PRETTY_FUNCTION__ *);
  363 (* BUILTIN_VA_ARG *);
  364 (* ATTRIBUTE_USED *);
  367 (* BUILTIN_TYPES_COMPAT *);
  368 (* BUILTIN_OFFSETOF *);
  369 (* DECLSPEC *);
  370 (* MSASM *);
  371 (* MSATTR *);
  372 (* PRAGMA_LINE *);
  373 (* PRAGMA *);
  375 (* AT_TRANSFORM *);
  376 (* AT_TRANSFORMEXPR *);
  377 (* AT_SPECIFIER *);
  378 (* AT_EXPR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\051\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\055\000\055\000\055\000\056\000\056\000\057\000\057\000\
\057\000\057\000\057\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\059\000\059\000\
\059\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\062\000\
\062\000\063\000\063\000\063\000\063\000\064\000\064\000\064\000\
\065\000\065\000\065\000\066\000\066\000\066\000\066\000\066\000\
\067\000\067\000\067\000\068\000\068\000\069\000\069\000\070\000\
\070\000\071\000\071\000\072\000\072\000\073\000\073\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\011\000\009\000\009\000\009\000\009\000\
\009\000\009\000\010\000\075\000\018\000\018\000\019\000\019\000\
\019\000\076\000\076\000\076\000\013\000\013\000\021\000\021\000\
\060\000\060\000\020\000\020\000\020\000\077\000\077\000\022\000\
\022\000\022\000\023\000\023\000\078\000\016\000\016\000\012\000\
\012\000\014\000\014\000\014\000\079\000\079\000\015\000\015\000\
\017\000\017\000\035\000\035\000\080\000\081\000\081\000\036\000\
\036\000\036\000\036\000\036\000\037\000\037\000\038\000\038\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\083\000\083\000\031\000\031\000\031\000\041\000\041\000\040\000\
\040\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\087\000\087\000\088\000\088\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\026\000\026\000\
\026\000\026\000\026\000\026\000\044\000\044\000\043\000\043\000\
\043\000\030\000\030\000\030\000\029\000\029\000\042\000\045\000\
\045\000\045\000\045\000\045\000\091\000\092\000\092\000\093\000\
\093\000\093\000\028\000\028\000\028\000\028\000\027\000\094\000\
\094\000\039\000\039\000\054\000\054\000\054\000\095\000\095\000\
\095\000\049\000\050\000\050\000\034\000\034\000\048\000\048\000\
\046\000\046\000\046\000\046\000\047\000\047\000\032\000\033\000\
\033\000\033\000\033\000\033\000\052\000\052\000\052\000\052\000\
\005\000\005\000\006\000\006\000\006\000\089\000\089\000\089\000\
\089\000\089\000\084\000\084\000\096\000\096\000\096\000\096\000\
\098\000\098\000\090\000\090\000\053\000\053\000\053\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\101\000\101\000\101\000\101\000\101\000\101\000\
\102\000\102\000\102\000\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\103\000\104\000\104\000\104\000\104\000\
\105\000\105\000\105\000\106\000\106\000\106\000\107\000\107\000\
\107\000\107\000\107\000\108\000\108\000\108\000\109\000\109\000\
\110\000\110\000\111\000\111\000\112\000\112\000\113\000\113\000\
\114\000\114\000\099\000\115\000\115\000\115\000\116\000\116\000\
\082\000\082\000\097\000\097\000\007\000\007\000\007\000\085\000\
\085\000\086\000\086\000\117\000\117\000\119\000\119\000\120\000\
\120\000\118\000\118\000\121\000\121\000\122\000\122\000\123\000\
\123\000\124\000\124\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\000\000\002\000\002\000\000\000\001\000\001\000\
\003\000\005\000\005\000\001\000\006\000\004\000\008\000\008\000\
\003\000\001\000\001\000\004\000\000\000\001\000\001\000\001\000\
\001\000\003\000\004\000\001\000\002\000\004\000\006\000\006\000\
\006\000\003\000\003\000\002\000\002\000\006\000\001\000\003\000\
\002\000\001\000\002\000\002\000\002\000\004\000\002\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\004\000\001\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\005\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\001\000\003\000\
\000\000\001\000\003\000\002\000\001\000\001\000\000\000\003\000\
\004\000\005\000\000\000\001\000\002\000\000\000\001\000\000\000\
\001\000\001\000\003\000\003\000\000\000\001\000\003\000\003\000\
\003\000\003\000\005\000\003\000\001\000\000\000\002\000\000\000\
\002\000\002\000\002\000\002\000\000\000\004\000\001\000\003\000\
\001\000\002\000\001\000\003\000\005\000\003\000\003\000\005\000\
\008\000\004\000\004\000\006\000\003\000\002\000\003\000\002\000\
\002\000\003\000\004\000\007\000\001\000\005\000\004\000\003\000\
\002\000\001\000\003\000\002\000\007\000\001\000\003\000\001\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\004\000\000\000\001\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\005\000\004\000\006\000\
\005\000\002\000\005\000\004\000\006\000\005\000\002\000\006\000\
\005\000\007\000\006\000\001\000\004\000\004\000\000\000\003\000\
\002\000\004\000\002\000\003\000\001\000\003\000\001\000\004\000\
\002\000\001\000\003\000\003\000\001\000\003\000\003\000\001\000\
\004\000\005\000\005\000\004\000\001\000\000\000\002\000\000\000\
\002\000\003\000\002\000\002\000\001\000\003\000\002\000\005\000\
\003\000\001\000\003\000\000\000\004\000\004\000\001\000\003\000\
\001\000\003\000\000\000\001\000\002\000\001\000\003\000\001\000\
\004\000\003\000\004\000\004\000\001\000\000\000\002\000\002\000\
\002\000\004\000\005\000\003\000\001\000\001\000\001\000\001\000\
\000\000\002\000\000\000\002\000\005\000\004\000\002\000\001\000\
\001\000\001\000\000\000\002\000\001\000\001\000\001\000\001\000\
\004\000\002\000\001\000\002\000\003\000\004\000\001\000\001\000\
\001\000\003\000\002\000\001\000\001\000\001\000\003\000\003\000\
\003\000\001\000\001\000\003\000\002\000\003\000\003\000\004\000\
\001\000\002\000\004\000\002\000\004\000\002\000\002\000\002\000\
\002\000\002\000\002\000\001\000\001\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\005\000\001\000\001\000\003\000\003\000\000\000\001\000\
\003\000\003\000\003\000\003\000\000\000\002\000\002\000\001\000\
\002\000\000\000\003\000\000\000\001\000\001\000\003\000\005\000\
\005\000\000\000\003\000\000\000\003\000\000\000\002\000\000\000\
\001\000\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\058\001\236\000\210\000\213\000\
\211\000\217\000\216\000\209\000\215\000\000\000\000\000\000\000\
\000\000\000\000\218\000\219\000\214\000\212\000\046\001\000\000\
\000\000\045\001\047\001\000\000\000\000\048\001\057\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\001\071\001\
\000\000\000\000\000\000\000\000\164\001\000\000\002\000\000\000\
\000\000\000\000\007\000\008\000\000\000\000\000\000\000\012\000\
\000\000\165\001\000\000\000\000\018\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\206\000\194\000\000\000\000\000\000\000\000\000\114\000\
\115\000\116\000\000\000\000\000\109\000\195\000\196\000\197\000\
\198\000\005\000\000\000\200\000\201\000\000\000\000\000\000\000\
\055\001\000\000\000\000\073\001\082\001\078\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\001\000\000\083\001\000\000\100\001\101\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\131\001\000\000\000\000\000\000\001\000\004\000\000\000\188\000\
\041\001\000\000\000\000\000\000\028\001\000\000\208\000\199\000\
\006\000\149\000\039\001\000\000\000\000\202\000\203\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\250\000\
\000\000\000\000\066\001\000\000\000\000\000\000\000\000\068\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\103\000\104\000\101\000\
\102\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\105\000\000\000\025\000\000\000\028\000\
\000\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\100\000\000\000\
\000\000\009\000\110\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\001\000\000\000\000\085\001\
\000\000\000\000\090\001\000\000\092\001\094\001\095\001\096\001\
\099\001\097\001\098\001\000\000\000\000\000\000\069\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\001\062\001\063\001\000\000\061\001\000\000\000\000\187\000\
\000\000\000\000\000\000\000\001\015\001\000\000\000\000\000\000\
\017\000\000\000\014\000\000\000\000\000\011\001\012\001\000\000\
\000\000\000\000\007\001\042\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\241\000\000\000\000\000\
\000\000\000\000\000\000\000\000\223\000\243\000\000\000\000\000\
\000\000\228\000\000\000\000\000\000\000\000\000\045\000\000\000\
\047\000\049\000\050\000\051\000\054\000\052\000\053\000\055\000\
\000\000\043\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\113\000\112\000\000\000\
\000\000\036\000\037\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\001\
\000\000\054\001\000\000\237\000\029\001\000\000\238\000\138\001\
\000\000\000\000\137\001\084\001\079\001\080\001\000\000\000\000\
\074\001\081\001\070\001\086\001\087\001\000\000\102\001\103\001\
\104\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\204\000\026\001\050\001\191\000\000\000\
\117\000\193\000\000\000\000\000\000\000\000\000\255\000\000\000\
\000\000\148\000\000\000\000\000\000\000\000\000\019\001\000\000\
\000\000\014\001\000\000\000\000\000\000\000\000\009\001\000\000\
\254\000\252\000\251\000\233\000\065\001\020\000\000\000\000\000\
\000\000\244\000\249\000\240\000\000\000\000\000\000\000\222\000\
\225\000\000\000\227\000\230\000\000\000\000\000\000\000\000\000\
\144\000\000\000\000\000\143\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\035\000\034\000\000\000\135\000\000\000\
\000\000\000\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\059\000\060\000\061\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\000\010\000\140\001\139\001\011\000\000\000\000\000\
\134\001\133\001\000\000\000\000\088\001\000\000\000\000\000\000\
\000\000\000\000\000\000\125\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\017\001\000\000\000\000\000\000\000\000\
\052\001\000\000\000\000\151\000\000\000\000\000\161\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\181\000\000\000\000\000\000\000\
\163\000\000\000\000\000\025\001\000\000\000\000\013\000\000\000\
\000\000\005\001\031\001\000\000\000\000\010\001\232\000\235\000\
\000\000\000\000\246\000\242\000\224\000\229\000\000\000\000\000\
\000\000\140\000\139\000\000\000\057\000\000\000\000\000\000\000\
\027\000\000\000\030\000\146\000\145\000\000\000\000\000\130\001\
\000\000\000\000\000\000\000\000\000\000\126\000\000\000\133\000\
\118\000\124\000\001\001\000\000\000\000\142\000\000\000\000\000\
\004\001\160\000\158\000\000\000\000\000\176\000\177\000\000\000\
\000\000\174\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\154\000\162\000\153\000\147\000\156\000\000\000\000\000\034\001\
\000\000\000\000\000\000\234\000\248\000\000\000\000\000\000\000\
\039\000\000\000\189\000\087\000\000\000\000\000\132\000\128\000\
\000\000\000\000\120\000\123\000\016\001\003\001\002\001\000\000\
\184\000\000\000\000\000\178\000\000\000\175\000\000\000\166\000\
\000\000\000\000\173\000\167\000\000\000\000\000\000\000\186\000\
\000\000\000\000\000\000\000\000\142\001\143\001\000\000\024\001\
\021\001\022\001\033\001\036\001\035\001\038\000\031\000\032\000\
\000\000\033\000\041\000\015\000\016\000\129\000\000\000\053\001\
\170\000\060\001\179\000\171\000\000\000\000\000\185\000\000\000\
\000\000\000\000\183\000\108\000\000\000\000\000\040\000\130\000\
\000\000\168\000\000\000\165\000\182\000\145\001\000\000\000\000\
\172\000\000\000\000\000\000\000\000\000\150\001\000\000\000\000\
\000\000\000\000\000\000\147\001\000\000\000\000\180\000\169\000\
\157\001\000\000\151\001\000\000\000\000\155\001\000\000\000\000\
\000\000\159\001\161\001\153\001\152\001\000\000\163\001"

let yydgoto = "\003\000\
\045\000\046\000\047\000\048\000\028\001\199\001\168\002\086\002\
\203\000\204\000\093\001\033\002\052\002\087\002\206\000\000\002\
\110\001\084\000\207\000\053\002\054\002\055\002\192\002\171\000\
\050\000\172\000\137\000\157\000\160\000\161\000\051\000\052\000\
\053\000\233\000\089\002\090\002\040\001\204\001\154\000\138\000\
\139\000\065\001\066\001\067\001\212\001\213\001\214\001\177\002\
\141\000\068\001\054\000\055\000\173\000\209\001\036\001\055\001\
\208\000\209\000\186\002\057\002\210\000\211\000\212\000\213\000\
\214\000\215\000\216\000\217\000\218\000\219\000\220\000\221\000\
\222\000\223\000\253\002\085\000\135\002\058\002\143\002\148\000\
\206\001\097\000\217\002\202\002\254\002\008\003\086\000\144\000\
\057\000\068\000\200\001\158\000\051\001\037\001\094\002\030\001\
\229\000\069\000\235\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\123\000\124\000\125\000\126\000\127\000\
\128\000\129\000\236\000\145\001\012\003\020\003\013\003\014\003\
\015\003\030\003\034\003\035\003"

let yysindex = "\056\000\
\150\013\150\013\000\000\021\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\206\000\083\016\
\226\000\063\255\000\000\000\000\000\000\000\000\000\000\157\014\
\083\016\000\000\000\000\083\016\083\016\000\000\000\000\150\013\
\085\255\083\016\083\016\128\255\192\255\235\255\000\000\000\000\
\159\023\254\255\007\000\031\000\000\000\063\001\000\000\150\013\
\040\255\117\016\000\000\000\000\047\255\107\000\083\016\000\000\
\083\016\000\000\092\000\193\015\000\000\000\000\148\000\082\000\
\235\255\086\000\119\000\090\255\201\255\175\010\132\000\093\000\
\083\016\000\000\000\000\175\010\145\000\238\000\039\012\000\000\
\000\000\000\000\191\014\035\255\000\000\000\000\000\000\000\000\
\000\000\000\000\088\000\000\000\000\000\035\255\059\010\039\023\
\000\000\032\255\089\000\000\000\000\000\000\000\111\012\130\012\
\159\023\159\023\159\023\159\023\159\023\159\023\159\023\156\000\
\000\000\214\254\000\000\252\255\000\000\000\000\125\000\246\000\
\062\000\236\000\014\001\183\000\201\000\194\000\208\000\203\255\
\000\000\185\013\039\012\020\001\000\000\000\000\126\001\000\000\
\000\000\202\000\200\000\247\000\000\000\157\255\000\000\000\000\
\000\000\000\000\000\000\181\000\221\000\000\000\000\000\232\000\
\235\000\245\000\193\015\008\001\251\000\005\001\032\001\000\000\
\016\001\088\000\000\000\079\001\148\000\148\000\023\001\000\000\
\024\001\175\010\250\254\031\001\175\010\175\010\175\010\041\001\
\048\001\175\010\175\010\051\001\000\000\000\000\000\000\000\000\
\000\000\000\000\202\012\018\013\039\012\039\012\039\012\039\012\
\039\012\039\012\138\001\037\013\037\013\129\005\067\001\078\001\
\080\001\084\001\000\000\000\000\086\001\000\000\177\255\000\000\
\059\001\000\000\200\002\250\000\027\001\018\001\148\001\050\001\
\097\001\109\001\115\001\118\001\238\255\000\000\000\000\150\013\
\040\255\000\000\000\000\079\023\114\001\117\001\119\001\008\001\
\147\001\250\255\130\001\150\001\000\000\255\022\228\001\000\000\
\241\001\129\005\000\000\129\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\180\001\000\002\144\001\000\000\097\255\
\097\255\159\023\159\023\159\023\159\023\159\023\159\023\159\023\
\159\023\159\023\159\023\159\023\159\023\159\023\159\023\159\023\
\159\023\159\023\159\023\159\023\159\023\189\001\191\001\194\001\
\000\000\000\000\000\000\008\001\000\000\126\001\008\001\000\000\
\064\011\126\001\094\001\000\000\000\000\205\001\037\002\188\001\
\000\000\092\000\000\000\083\016\226\001\000\000\000\000\000\000\
\202\255\047\015\000\000\000\000\039\012\134\001\225\001\230\001\
\239\001\016\001\016\001\148\000\175\010\000\000\039\012\175\010\
\222\001\252\001\254\001\157\255\000\000\000\000\009\002\013\002\
\175\010\000\000\014\002\019\002\175\010\129\005\000\000\129\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\129\005\000\000\000\000\014\000\006\002\023\002\024\002\026\002\
\039\012\083\016\083\016\099\002\035\255\000\000\000\000\097\255\
\097\255\000\000\000\000\141\008\218\008\000\000\039\012\039\012\
\039\012\039\012\039\012\039\012\039\012\039\012\039\012\039\012\
\039\012\039\012\039\012\039\012\039\012\039\012\039\012\039\012\
\039\012\039\012\039\012\039\012\039\012\039\012\039\012\039\012\
\039\012\039\012\039\012\141\008\029\002\247\000\023\000\000\000\
\033\002\000\000\027\002\000\000\000\000\034\002\000\000\000\000\
\119\023\119\023\000\000\000\000\000\000\000\000\036\002\038\002\
\000\000\000\000\000\000\000\000\000\000\032\002\000\000\000\000\
\000\000\125\000\125\000\246\000\246\000\062\000\062\000\062\000\
\062\000\236\000\236\000\014\001\183\000\201\000\194\000\208\000\
\035\002\121\002\125\002\000\000\000\000\000\000\000\000\162\007\
\000\000\000\000\008\001\092\000\126\001\057\002\000\000\193\015\
\018\003\000\000\051\002\053\002\235\255\006\005\000\000\163\255\
\054\002\000\000\113\001\234\008\075\007\058\002\000\000\251\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\002\062\002\
\016\001\000\000\000\000\000\000\039\012\109\255\175\010\000\000\
\000\000\066\002\000\000\000\000\068\002\071\002\072\002\073\002\
\000\000\141\008\141\008\000\000\141\011\000\000\067\002\069\002\
\070\002\074\002\076\002\000\000\000\000\078\002\000\000\080\002\
\212\255\077\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\250\000\250\000\027\001\027\001\018\001\018\001\018\001\
\018\001\148\001\148\001\050\001\097\001\109\001\115\001\118\001\
\082\002\000\000\000\000\000\000\000\000\000\000\113\001\083\002\
\000\000\000\000\089\002\089\002\000\000\159\023\097\002\102\002\
\000\000\097\255\039\012\000\000\111\002\000\000\158\002\118\002\
\123\002\064\011\126\002\000\000\128\002\039\009\035\255\129\002\
\000\000\037\002\181\000\000\000\078\002\131\002\000\000\151\002\
\152\002\079\255\240\007\160\002\039\012\170\002\160\002\191\006\
\176\002\160\002\047\255\146\000\000\000\006\005\171\002\006\005\
\000\000\178\002\006\005\000\000\173\002\180\002\000\000\185\002\
\008\001\000\000\000\000\193\015\141\008\000\000\000\000\000\000\
\186\002\126\001\000\000\000\000\000\000\000\000\089\002\089\002\
\089\002\000\000\000\000\162\007\000\000\083\016\083\016\097\255\
\000\000\182\002\000\000\000\000\000\000\039\012\008\001\000\000\
\150\013\039\012\254\254\185\255\162\007\000\000\064\011\000\000\
\000\000\000\000\000\000\083\016\147\000\000\000\187\002\190\002\
\000\000\000\000\000\000\131\255\190\255\000\000\000\000\184\002\
\141\008\000\000\188\002\116\009\191\006\186\000\191\006\191\006\
\196\002\189\002\252\005\191\006\053\001\146\000\146\000\204\002\
\000\000\000\000\000\000\000\000\000\000\163\255\227\015\000\000\
\210\002\218\002\217\002\000\000\000\000\222\002\225\002\226\002\
\000\000\005\000\000\000\000\000\227\002\228\002\000\000\000\000\
\254\254\039\012\000\000\000\000\000\000\000\000\000\000\126\001\
\000\000\191\006\190\255\000\000\220\002\000\000\014\000\000\000\
\191\006\039\012\000\000\000\000\190\255\160\002\230\002\000\000\
\141\008\209\002\160\002\047\255\000\000\000\000\047\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\003\000\000\000\000\000\000\000\000\000\000\235\002\000\000\
\000\000\000\000\000\000\000\000\236\002\242\002\000\000\243\002\
\191\006\047\255\000\000\000\000\047\003\245\002\000\000\000\000\
\191\006\000\000\141\008\000\000\000\000\000\000\248\002\254\002\
\000\000\255\002\072\003\251\002\000\003\000\000\035\255\005\003\
\191\006\001\003\248\002\000\000\248\002\012\003\000\000\000\000\
\000\000\010\003\000\000\193\009\047\003\000\000\017\003\020\003\
\013\003\000\000\000\000\000\000\000\000\047\003\000\000"

let yyrindex = "\000\000\
\012\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\163\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\255\
\163\000\000\000\000\000\163\000\163\000\000\000\000\000\009\000\
\000\000\163\000\163\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\222\255\138\000\000\000\000\000\000\000\000\000\163\000\000\000\
\163\000\000\000\081\015\022\003\000\000\000\000\000\000\000\000\
\000\000\000\000\002\002\000\000\255\000\032\003\039\002\000\000\
\163\000\000\000\000\000\032\003\156\002\000\000\000\000\000\000\
\000\000\000\000\000\000\045\014\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\152\006\011\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\187\023\000\000\000\000\033\024\138\024\
\240\024\134\022\074\010\189\010\161\008\253\002\012\002\103\001\
\000\000\108\003\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\030\003\000\000\050\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\149\003\000\000\000\000\000\000\038\003\
\078\255\000\000\000\000\214\255\041\003\000\000\245\255\000\000\
\046\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\003\222\255\000\000\032\003\032\003\032\003\193\002\
\000\000\032\003\032\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\204\016\000\000\
\037\017\000\000\029\018\099\018\053\019\007\020\002\021\155\021\
\251\021\056\022\152\022\179\007\135\001\000\000\000\000\071\255\
\222\255\000\000\000\000\043\003\000\000\000\000\000\000\037\001\
\000\000\000\000\049\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\174\000\000\000\025\003\222\255\000\000\
\000\000\033\255\021\000\000\000\000\000\000\000\000\000\016\004\
\000\000\000\000\000\000\069\255\000\000\000\000\000\000\176\000\
\048\003\000\000\000\000\000\000\000\000\051\003\000\000\000\000\
\000\000\046\003\046\003\000\000\032\003\000\000\000\000\032\003\
\066\001\044\003\000\000\000\000\000\000\000\000\000\000\000\000\
\032\003\000\000\000\000\000\000\032\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\003\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\003\000\000\083\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\024\102\024\171\024\207\024\020\025\053\025\089\025\
\122\025\145\025\168\025\148\010\158\013\059\009\100\005\131\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\003\
\000\000\000\000\222\255\081\015\062\008\000\000\000\000\022\003\
\151\001\000\000\054\003\000\000\000\000\063\003\000\000\222\255\
\111\255\000\000\253\000\123\000\151\255\000\000\000\000\041\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\003\000\000\000\000\000\000\000\000\222\255\032\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\169\018\239\018\123\019\193\019\046\020\113\020\152\020\
\219\020\059\021\098\021\194\021\034\022\095\022\191\022\080\008\
\000\000\000\000\000\000\000\000\000\000\000\000\193\000\000\000\
\000\000\000\000\220\023\000\024\000\000\000\000\000\000\000\000\
\249\025\000\000\000\000\000\000\065\003\000\000\218\011\000\000\
\000\000\000\000\000\000\000\000\000\000\064\003\000\000\000\000\
\000\000\000\000\149\003\000\000\154\000\039\026\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\003\000\000\063\003\000\000\063\003\
\000\000\000\000\063\003\000\000\066\003\000\000\000\000\000\000\
\219\000\000\000\000\000\022\003\064\003\000\000\000\000\000\000\
\000\000\092\001\000\000\000\000\000\000\000\000\126\017\215\017\
\000\000\000\000\000\000\053\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\199\000\000\000\
\071\255\000\000\243\010\000\000\053\003\000\000\000\000\000\000\
\000\000\000\000\000\000\121\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\006\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\026\000\000\086\003\000\000\000\000\069\003\069\003\000\000\
\000\000\000\000\000\000\000\000\000\000\222\255\069\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\243\010\000\000\000\000\000\000\000\000\000\000\000\000\048\002\
\000\000\000\000\050\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\007\000\000\000\000\000\000\
\086\003\139\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\114\001\000\000\000\000\
\000\000\000\000\071\003\000\000\000\000\000\000\159\000\000\000\
\000\000\000\000\000\000\125\003\074\000\000\000\000\000\000\000\
\000\000\000\000\159\000\000\000\037\255\000\000\000\000\000\000\
\000\000\126\003\000\000\000\000\127\003\000\000\000\000\000\000\
\128\003\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\143\004\230\255\072\004\059\255\002\003\011\000\153\254\
\000\000\232\255\221\255\045\254\249\254\219\255\226\253\000\000\
\018\002\000\000\000\000\000\000\000\000\180\253\016\002\100\000\
\000\000\196\255\000\000\124\255\151\003\122\255\183\255\000\000\
\000\000\073\255\205\255\102\255\143\002\147\002\227\254\000\000\
\183\003\227\255\000\000\244\002\075\004\000\000\000\000\243\255\
\103\255\236\255\118\255\000\000\003\000\086\254\022\000\225\254\
\000\000\000\000\000\000\245\253\120\001\242\255\069\001\070\001\
\106\001\072\001\084\003\090\003\085\003\089\003\091\003\000\000\
\105\002\076\003\039\253\193\255\000\000\000\000\127\002\000\000\
\000\000\199\255\000\000\042\002\235\001\000\000\084\004\000\000\
\135\255\039\000\253\255\081\254\031\003\000\000\081\002\245\254\
\095\004\000\000\001\000\000\000\000\000\000\000\213\255\245\001\
\246\001\232\001\242\001\230\003\241\003\249\003\250\003\248\003\
\000\000\246\254\046\255\000\000\040\002\000\000\000\000\041\002\
\000\000\000\000\000\000\251\001"

let yytablesize = 7034
let yytable = "\083\000\
\060\000\147\000\048\001\056\000\056\000\090\000\038\001\163\000\
\003\000\226\000\185\001\003\000\207\001\029\001\095\001\177\000\
\113\000\144\001\003\000\140\000\227\000\134\000\045\001\201\001\
\064\002\194\001\223\001\224\001\142\000\205\000\058\001\059\001\
\237\000\049\001\056\000\067\000\071\000\254\000\077\000\049\001\
\240\000\114\000\080\000\205\000\156\001\157\002\145\000\050\002\
\160\002\040\001\056\000\164\002\135\000\072\000\191\002\078\000\
\001\000\002\000\159\001\231\000\160\001\246\000\247\000\248\000\
\249\000\250\000\251\000\033\003\020\001\230\000\006\000\113\000\
\063\001\064\001\051\002\255\000\033\003\044\001\048\001\152\002\
\113\000\113\000\113\000\113\000\113\000\113\000\113\000\205\000\
\190\001\167\000\061\000\049\001\195\001\176\000\059\000\023\001\
\062\000\061\000\135\000\180\000\049\000\049\000\205\000\062\000\
\182\002\238\000\049\001\168\000\205\000\062\001\043\001\252\000\
\070\001\071\001\072\001\074\000\191\002\075\001\076\001\136\000\
\020\001\195\002\146\000\074\000\074\000\040\001\046\001\074\000\
\074\000\192\000\192\000\049\000\056\000\074\000\074\000\049\001\
\079\000\153\002\081\000\082\000\156\001\156\001\047\001\103\001\
\020\001\003\000\096\001\049\000\020\001\143\000\238\001\205\000\
\239\001\044\001\074\000\049\001\074\000\061\000\091\000\156\000\
\094\001\240\001\092\002\062\000\029\001\166\000\061\002\135\000\
\029\001\029\001\248\001\249\001\074\000\216\001\082\001\083\001\
\084\001\085\001\086\001\087\001\178\002\225\001\225\000\246\002\
\080\000\102\001\043\001\063\001\250\002\201\001\096\001\005\000\
\096\001\105\002\232\000\142\001\020\001\141\001\041\002\042\002\
\201\001\094\000\061\000\113\000\094\001\202\001\094\001\215\002\
\062\000\038\001\201\002\150\001\066\000\113\000\027\001\167\001\
\168\001\169\001\149\001\066\000\027\001\135\000\027\001\049\001\
\031\000\197\002\056\000\037\001\027\001\049\000\034\001\049\001\
\162\002\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\193\001\156\000\062\002\
\226\001\142\001\166\001\228\001\226\002\248\002\193\002\189\001\
\006\000\095\000\194\002\006\000\234\001\097\002\020\001\099\002\
\237\001\217\001\006\000\211\001\051\001\164\001\165\001\066\000\
\081\000\082\000\096\001\227\001\096\001\021\001\013\001\027\001\
\033\000\124\002\027\001\128\002\242\001\096\001\013\001\027\001\
\094\001\232\000\094\001\064\000\000\001\001\001\038\000\010\003\
\039\000\139\001\138\002\094\001\096\000\208\002\233\002\211\002\
\212\002\065\000\051\001\061\000\218\002\247\001\133\000\253\000\
\140\001\062\000\152\001\049\000\066\000\253\000\255\001\002\002\
\002\001\130\000\153\001\029\001\251\001\234\002\049\001\029\001\
\027\001\109\001\131\000\003\000\049\001\232\000\241\001\232\000\
\027\001\029\001\029\001\029\001\152\000\061\000\242\001\036\002\
\051\001\127\002\241\002\062\000\051\001\051\001\034\002\153\001\
\132\000\244\002\149\000\014\002\015\002\016\002\017\002\017\002\
\017\002\017\002\017\002\017\002\017\002\017\002\017\002\017\002\
\017\002\017\002\017\002\017\002\017\002\252\001\253\001\196\002\
\113\000\113\000\008\001\009\001\088\002\144\001\063\000\138\000\
\049\001\207\000\207\000\144\001\138\000\138\000\138\000\208\001\
\207\000\004\003\149\001\068\002\159\000\156\000\049\001\049\001\
\149\001\009\003\049\001\162\000\193\001\064\000\049\001\164\000\
\051\001\228\000\205\000\205\000\181\002\059\002\156\001\241\000\
\175\000\024\003\108\002\065\000\166\002\029\001\027\001\167\002\
\028\001\232\000\093\002\232\000\027\001\066\000\028\001\003\001\
\004\001\005\001\148\002\169\002\232\000\171\002\183\002\184\002\
\173\002\106\002\165\000\051\001\207\000\232\000\232\000\048\001\
\049\001\051\001\051\001\051\001\114\002\115\002\061\000\174\000\
\091\002\100\002\207\000\207\000\062\000\056\002\207\000\066\000\
\207\000\207\000\207\000\027\001\178\000\205\000\243\000\245\000\
\198\002\027\001\061\000\242\001\006\000\048\001\117\002\148\001\
\062\000\006\000\253\000\205\000\205\000\148\001\061\000\205\000\
\029\001\205\000\205\000\205\000\062\000\016\001\027\001\027\001\
\032\001\028\001\027\001\049\001\028\001\049\001\027\001\067\001\
\032\001\018\001\240\002\049\001\207\000\067\001\156\001\156\001\
\209\002\017\001\049\001\210\002\088\002\049\001\088\002\132\002\
\027\001\088\002\019\001\027\001\024\001\113\000\193\001\032\001\
\142\002\070\000\031\001\203\002\033\001\205\000\039\001\165\002\
\010\001\011\001\012\001\013\001\027\001\155\002\144\002\027\001\
\027\001\158\002\028\001\156\000\041\001\076\000\006\001\007\001\
\064\000\225\000\079\001\081\001\122\001\123\001\124\001\049\001\
\042\001\179\000\043\001\090\001\091\001\044\001\065\000\142\002\
\014\001\015\001\135\000\059\002\064\000\053\001\049\001\131\002\
\066\000\049\001\067\001\050\001\049\001\052\001\029\001\057\001\
\193\001\203\002\065\000\125\001\126\001\027\001\127\001\128\001\
\091\002\216\002\091\002\203\002\066\000\091\002\190\002\005\000\
\054\001\193\001\060\001\193\001\133\001\134\001\189\002\061\001\
\066\000\069\001\150\001\104\001\105\001\030\001\027\001\017\002\
\096\002\027\001\005\000\205\002\073\001\030\001\094\001\049\001\
\025\001\067\001\074\001\026\001\027\001\034\002\077\001\005\000\
\031\000\106\001\107\001\056\000\108\001\218\001\159\000\109\001\
\086\000\056\002\088\001\025\001\097\001\185\002\026\001\027\001\
\093\002\247\000\247\000\031\000\219\002\220\002\051\001\098\001\
\025\001\099\001\056\002\026\001\027\001\100\001\239\002\135\001\
\031\000\086\000\192\000\192\000\086\000\086\000\101\001\196\001\
\251\002\086\000\197\001\049\001\049\001\136\001\245\002\129\001\
\221\002\222\002\137\001\034\002\129\001\129\001\129\001\129\001\
\138\001\225\000\146\001\225\000\051\001\147\001\225\000\148\001\
\033\000\018\002\019\002\198\001\020\002\021\002\005\003\156\000\
\129\001\130\001\131\001\132\001\026\002\027\002\038\000\086\000\
\039\000\086\000\154\001\033\000\086\000\086\000\086\000\086\000\
\086\000\232\000\232\000\151\001\129\001\034\002\155\001\051\001\
\033\000\038\000\051\001\039\000\049\000\051\001\051\001\051\001\
\157\001\086\000\022\002\023\002\024\002\025\002\038\000\208\001\
\039\000\174\001\175\001\176\001\177\001\158\001\022\003\086\000\
\032\003\086\000\170\001\171\001\161\001\172\001\173\001\178\001\
\179\001\231\000\231\000\231\000\162\001\163\001\225\000\186\001\
\231\000\187\001\188\001\231\000\231\000\231\000\231\000\231\000\
\231\000\231\000\208\001\231\000\231\000\231\000\231\000\202\001\
\231\000\231\000\231\000\231\000\231\000\231\000\231\000\231\000\
\231\000\231\000\231\000\231\000\231\000\203\001\220\000\220\000\
\220\000\205\001\210\001\220\001\229\001\220\000\221\001\049\001\
\220\000\220\000\220\000\220\000\220\000\220\000\220\000\222\001\
\220\000\220\000\220\000\220\000\231\000\220\000\220\000\220\000\
\220\000\220\000\220\000\220\000\220\000\220\000\220\000\220\000\
\220\000\220\000\231\000\231\000\230\001\231\001\231\000\127\001\
\231\000\231\000\231\000\232\001\127\001\049\001\243\001\233\001\
\235\001\127\001\127\001\127\001\127\001\236\001\127\001\244\001\
\245\001\220\000\246\001\250\001\231\000\231\000\231\000\035\002\
\231\000\037\002\038\002\039\002\043\002\045\002\044\002\220\000\
\220\000\046\002\231\000\220\000\231\000\220\000\220\000\220\000\
\049\001\047\002\231\000\049\001\231\000\048\002\049\001\049\001\
\049\001\127\001\063\002\066\002\067\002\095\002\101\002\103\002\
\104\002\220\000\220\000\220\000\109\002\220\000\110\002\111\002\
\112\002\113\002\121\002\118\002\122\002\119\002\120\002\220\000\
\123\002\220\000\125\002\226\000\226\000\226\000\242\001\220\000\
\126\002\220\000\226\000\153\001\116\002\226\000\226\000\226\000\
\226\000\226\000\226\000\226\000\129\002\226\000\226\000\226\000\
\226\000\130\002\226\000\226\000\226\000\226\000\226\000\226\000\
\226\000\226\000\226\000\226\000\226\000\226\000\226\000\133\002\
\221\000\221\000\221\000\134\002\136\002\137\002\139\002\221\000\
\140\002\145\002\221\000\221\000\221\000\221\000\221\000\221\000\
\221\000\149\002\221\000\221\000\221\000\221\000\226\000\221\000\
\221\000\221\000\221\000\221\000\221\000\221\000\221\000\221\000\
\221\000\221\000\221\000\221\000\226\000\226\000\150\002\151\002\
\226\000\156\002\226\000\226\000\226\000\111\001\112\001\113\001\
\114\001\115\001\116\001\117\001\118\001\119\001\120\001\121\001\
\159\002\163\002\170\002\221\000\172\002\174\002\226\000\226\000\
\226\000\176\002\226\000\175\002\180\002\187\002\200\002\204\002\
\199\002\221\000\221\000\206\002\226\000\221\000\226\000\221\000\
\221\000\221\000\213\002\005\000\226\000\223\002\226\000\214\002\
\049\001\049\001\227\002\049\001\049\001\049\001\049\001\049\001\
\049\001\049\001\228\002\221\000\221\000\221\000\229\002\221\000\
\230\002\231\002\232\002\243\002\025\001\236\002\237\002\026\001\
\027\001\221\000\249\002\221\000\031\000\247\002\252\002\255\002\
\000\003\221\000\001\003\221\000\049\001\049\001\049\001\125\001\
\125\001\002\003\003\003\007\003\011\003\125\001\016\003\017\003\
\018\003\019\003\125\001\125\001\125\001\125\001\025\003\125\001\
\021\003\049\001\049\001\049\001\023\003\028\003\049\001\049\001\
\029\003\036\003\049\001\049\001\037\003\038\003\006\001\049\001\
\049\001\049\001\049\001\075\000\049\001\049\001\049\001\049\001\
\049\001\049\001\239\000\006\000\087\000\190\000\018\001\088\000\
\089\000\008\001\125\001\135\001\033\000\092\000\093\000\198\001\
\021\000\132\001\134\000\245\000\038\001\022\000\006\000\121\000\
\049\001\049\001\038\000\049\001\039\000\159\000\136\000\049\001\
\049\001\152\000\150\000\119\000\151\000\141\000\141\001\136\000\
\058\000\023\001\049\001\049\001\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\136\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\003\002\004\002\005\002\006\002\007\002\008\002\
\009\002\010\002\011\002\012\002\013\002\154\001\158\001\160\001\
\162\001\022\001\065\002\235\002\219\001\157\000\157\000\157\000\
\238\002\147\002\157\000\157\000\146\002\191\001\157\000\157\000\
\035\001\107\002\028\002\157\000\157\000\030\002\157\000\157\000\
\157\000\029\002\031\002\179\002\157\000\032\002\188\002\006\003\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\242\002\180\001\102\002\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\224\002\157\000\
\056\001\181\001\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\182\001\184\001\183\001\157\000\157\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\039\003\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\000\000\000\000\000\000\
\000\000\000\000\026\003\000\000\000\000\027\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\150\000\150\000\150\000\000\000\000\000\150\000\150\000\000\000\
\000\000\150\000\150\000\000\000\000\000\000\000\150\000\150\000\
\000\000\150\000\150\000\150\000\000\000\000\000\000\000\150\000\
\000\000\000\000\000\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\000\000\
\000\000\000\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\000\000\150\000\000\000\000\000\000\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\000\000\000\000\000\000\
\150\000\150\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\000\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\164\000\164\000\164\000\000\000\000\000\
\164\000\164\000\000\000\000\000\164\000\164\000\000\000\000\000\
\000\000\164\000\164\000\000\000\164\000\164\000\164\000\000\000\
\000\000\000\000\164\000\000\000\000\000\000\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\000\000\000\000\000\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\000\000\164\000\000\000\000\000\
\000\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\000\000\000\000\000\000\164\000\164\000\069\002\070\002\005\000\
\182\000\183\000\184\000\185\000\006\000\080\000\186\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\073\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\187\000\188\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\189\000\190\000\
\191\000\000\000\000\000\192\000\193\000\000\000\000\000\194\000\
\195\000\000\000\000\000\000\000\196\000\197\000\000\000\198\000\
\000\000\146\000\000\000\000\000\000\000\071\002\000\000\000\000\
\000\000\072\002\073\002\074\002\075\002\076\002\077\002\078\002\
\079\002\080\002\081\002\082\002\083\002\000\000\000\000\000\000\
\033\000\034\000\035\000\084\002\037\000\081\000\082\000\000\000\
\199\000\000\000\000\000\000\000\200\000\201\000\038\000\085\002\
\039\000\040\000\041\000\000\000\000\000\000\000\044\000\202\000\
\092\001\181\000\005\000\182\000\183\000\184\000\185\000\006\000\
\080\000\186\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\015\000\016\000\017\000\000\000\019\000\
\020\000\021\000\022\000\023\000\073\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\187\000\188\000\126\001\126\001\
\000\000\000\000\000\000\000\000\126\001\000\000\000\000\000\000\
\000\000\126\001\126\001\126\001\126\001\000\000\126\001\000\000\
\000\000\189\000\190\000\191\000\000\000\000\000\192\000\193\000\
\000\000\000\000\194\000\195\000\000\000\000\000\128\001\196\000\
\197\000\000\000\198\000\128\001\146\000\000\000\000\000\000\000\
\128\001\128\001\128\001\128\001\000\000\128\001\000\000\000\000\
\000\000\126\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\034\000\035\000\000\000\037\000\
\081\000\082\000\000\000\199\000\000\000\000\000\000\000\200\000\
\201\000\038\000\000\000\039\000\000\000\000\000\000\000\000\000\
\128\001\044\000\202\000\254\001\181\000\005\000\182\000\183\000\
\184\000\185\000\006\000\080\000\186\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\000\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\073\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\187\000\
\188\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\000\190\000\191\000\000\000\
\000\000\192\000\193\000\000\000\000\000\194\000\195\000\000\000\
\000\000\000\000\196\000\197\000\000\000\198\000\000\000\000\000\
\000\000\000\000\000\000\059\001\059\001\000\000\059\001\059\001\
\059\001\059\001\000\000\059\001\059\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\034\000\
\035\000\000\000\037\000\081\000\082\000\000\000\199\000\000\000\
\000\000\000\000\200\000\201\000\038\000\000\000\039\000\059\001\
\059\001\000\000\000\000\000\000\044\000\202\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\001\059\001\059\001\000\000\
\000\000\059\001\059\001\000\000\000\000\059\001\059\001\000\000\
\000\000\000\000\059\001\059\001\000\000\059\001\155\000\059\001\
\000\000\000\000\000\000\059\001\000\000\000\000\000\000\059\001\
\059\001\059\001\059\001\059\001\059\001\059\001\059\001\059\001\
\059\001\059\001\059\001\000\000\000\000\000\000\000\000\000\000\
\000\000\059\001\000\000\059\001\059\001\000\000\059\001\000\000\
\000\000\000\000\059\001\059\001\000\000\059\001\069\002\161\002\
\000\000\182\000\183\000\184\000\185\000\059\001\080\000\186\000\
\072\001\072\001\072\001\072\001\072\001\072\001\072\001\072\001\
\072\001\072\001\072\001\072\001\072\001\000\000\072\001\072\001\
\072\001\000\000\072\001\072\001\072\001\072\001\000\000\000\000\
\072\001\000\000\187\000\188\000\072\001\072\001\072\001\072\001\
\072\001\000\000\072\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\189\000\
\190\000\191\000\000\000\000\000\192\000\193\000\000\000\000\000\
\194\000\195\000\000\000\000\000\000\000\196\000\197\000\000\000\
\198\000\000\000\146\000\000\000\000\000\072\001\071\002\000\000\
\000\000\000\000\072\002\073\002\074\002\075\002\076\002\077\002\
\078\002\079\002\080\002\081\002\082\002\083\002\000\000\000\000\
\000\000\000\000\000\000\000\000\084\002\000\000\081\000\082\000\
\000\000\199\000\000\000\000\000\000\000\200\000\201\000\000\000\
\085\002\059\001\059\001\000\000\059\001\059\001\059\001\059\001\
\202\000\059\001\059\001\076\001\076\001\076\001\076\001\076\001\
\076\001\076\001\076\001\076\001\076\001\076\001\076\001\076\001\
\000\000\076\001\076\001\076\001\005\000\076\001\076\001\076\001\
\076\001\000\000\000\000\076\001\000\000\059\001\059\001\076\001\
\076\001\000\000\076\001\076\001\000\000\076\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\001\000\000\000\000\
\026\001\027\001\059\001\059\001\059\001\031\000\000\000\059\001\
\059\001\000\000\000\000\059\001\059\001\000\000\000\000\000\000\
\059\001\059\001\000\000\059\001\000\000\059\001\000\000\000\000\
\076\001\059\001\000\000\000\000\000\000\059\001\059\001\059\001\
\059\001\059\001\059\001\059\001\059\001\059\001\059\001\059\001\
\059\001\000\000\000\000\000\000\098\002\000\000\000\000\059\001\
\000\000\059\001\059\001\000\000\059\001\000\000\000\000\000\000\
\059\001\059\001\049\002\059\001\182\000\183\000\184\000\185\000\
\062\000\080\000\186\000\059\001\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\187\000\188\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\084\000\084\000\000\000\050\002\000\000\084\000\000\000\000\000\
\000\000\000\000\189\000\190\000\191\000\000\000\000\000\192\000\
\193\000\000\000\000\000\194\000\195\000\000\000\000\000\000\000\
\196\000\197\000\000\000\198\000\000\000\192\001\051\002\254\001\
\181\000\000\000\182\000\183\000\184\000\185\000\084\000\080\000\
\186\000\000\000\000\000\084\000\000\000\084\000\000\000\000\000\
\084\000\084\000\084\000\084\000\084\000\084\000\000\000\000\000\
\000\000\081\000\082\000\000\000\199\000\000\000\000\000\000\000\
\200\000\201\000\000\000\187\000\188\000\084\000\000\000\000\000\
\000\000\000\000\000\000\202\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\000\000\000\084\000\000\000\000\000\
\189\000\190\000\191\000\000\000\000\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\000\000\196\000\197\000\
\000\000\198\000\000\000\000\000\000\000\049\001\049\001\154\002\
\049\001\049\001\049\001\049\001\000\000\049\001\049\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\000\000\000\000\000\000\000\000\000\000\081\000\
\082\000\000\000\199\000\000\000\000\000\000\000\200\000\201\000\
\000\000\049\001\049\001\000\000\000\000\000\000\000\000\000\000\
\000\000\202\000\085\000\000\000\000\000\085\000\085\000\000\000\
\000\000\000\000\085\000\000\000\000\000\000\000\049\001\049\001\
\049\001\000\000\000\000\049\001\049\001\000\000\000\000\049\001\
\049\001\000\000\000\000\000\000\049\001\049\001\000\000\049\001\
\000\000\000\000\000\000\049\001\254\001\181\000\000\000\182\000\
\183\000\184\000\185\000\085\000\080\000\186\000\000\000\000\000\
\085\000\000\000\085\000\000\000\000\000\085\000\085\000\085\000\
\085\000\085\000\085\000\000\000\000\000\049\001\049\001\000\000\
\049\001\000\000\000\000\000\000\049\001\049\001\000\000\000\000\
\187\000\188\000\085\000\000\000\000\000\000\000\000\000\049\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\085\000\000\000\000\000\189\000\190\000\191\000\
\000\000\000\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\000\000\196\000\197\000\000\000\198\000\000\000\
\000\000\001\002\181\000\000\000\182\000\183\000\184\000\185\000\
\123\001\080\000\186\000\123\001\123\001\000\000\000\000\000\000\
\000\000\123\001\000\000\005\000\000\000\000\000\123\001\123\001\
\123\001\123\001\000\000\123\001\081\000\082\000\000\000\199\000\
\000\000\000\000\000\000\200\000\201\000\187\000\188\000\000\000\
\000\000\000\000\000\000\000\000\025\001\000\000\202\000\026\001\
\027\001\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\189\000\190\000\191\000\000\000\123\001\192\000\
\193\000\000\000\000\000\194\000\195\000\000\000\000\000\000\000\
\196\000\197\000\000\000\198\000\000\000\000\000\141\002\181\000\
\000\000\182\000\183\000\184\000\185\000\000\000\080\000\186\000\
\000\000\000\000\000\000\098\002\000\000\000\000\197\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\082\000\000\000\199\000\000\000\000\000\000\000\
\200\000\201\000\187\000\188\000\033\000\000\000\000\000\198\001\
\000\000\000\000\000\000\202\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\039\000\000\000\000\000\189\000\
\190\000\191\000\000\000\000\000\192\000\193\000\000\000\000\000\
\194\000\195\000\000\000\000\000\000\000\196\000\197\000\000\000\
\198\000\000\000\000\000\207\002\181\000\000\000\182\000\183\000\
\184\000\185\000\124\001\080\000\186\000\124\001\124\001\000\000\
\000\000\000\000\000\000\124\001\000\000\000\000\000\000\000\000\
\124\001\124\001\124\001\124\001\000\000\124\001\081\000\082\000\
\000\000\199\000\000\000\000\000\000\000\200\000\201\000\187\000\
\188\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\000\190\000\191\000\000\000\
\124\001\192\000\193\000\000\000\000\000\194\000\195\000\000\000\
\000\000\000\000\196\000\197\000\000\000\198\000\000\000\000\000\
\031\003\181\000\000\000\182\000\183\000\184\000\185\000\000\000\
\080\000\186\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\082\000\000\000\199\000\000\000\
\000\000\000\000\200\000\201\000\187\000\188\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\202\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\189\000\190\000\191\000\000\000\000\000\192\000\193\000\
\000\000\000\000\194\000\195\000\000\000\000\000\000\000\196\000\
\197\000\000\000\198\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000\082\000\000\000\199\000\000\000\000\000\000\000\200\000\
\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\000\181\000\005\000\182\000\183\000\184\000\
\185\000\006\000\080\000\186\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\000\014\000\015\000\016\000\017\000\
\000\000\019\000\020\000\021\000\022\000\023\000\073\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\187\000\188\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\000\190\000\191\000\000\000\000\000\
\192\000\193\000\000\000\000\000\194\000\195\000\000\000\000\000\
\000\000\196\000\197\000\000\000\198\000\000\000\000\000\000\000\
\119\001\119\001\119\001\000\000\119\001\119\001\000\000\000\000\
\000\000\000\000\119\001\000\000\000\000\000\000\000\000\119\001\
\119\001\119\001\119\001\000\000\119\001\033\000\034\000\035\000\
\000\000\037\000\081\000\082\000\000\000\199\000\000\000\000\000\
\000\000\200\000\201\000\038\000\000\000\039\000\169\000\000\000\
\005\000\000\000\000\000\044\000\202\000\006\000\000\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\119\001\
\014\000\015\000\016\000\017\000\000\000\019\000\020\000\021\000\
\022\000\023\000\073\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\120\001\120\001\120\001\000\000\120\001\120\001\
\000\000\000\000\000\000\000\000\120\001\000\000\000\000\000\000\
\000\000\120\001\120\001\120\001\120\001\000\000\120\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\000\000\000\131\000\131\000\131\000\
\131\000\000\000\131\000\131\000\121\001\121\001\170\000\121\001\
\121\001\000\000\000\000\000\000\000\000\121\001\000\000\000\000\
\000\000\120\001\121\001\121\001\121\001\121\001\000\000\121\001\
\000\000\033\000\034\000\035\000\000\000\037\000\131\000\131\000\
\131\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\039\000\040\000\041\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\131\000\131\000\131\000\000\000\000\000\
\131\000\131\000\121\001\000\000\131\000\131\000\000\000\000\000\
\000\000\131\000\131\000\000\000\131\000\000\000\131\000\000\000\
\181\000\000\000\182\000\183\000\184\000\185\000\000\000\080\000\
\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\131\000\131\000\000\000\131\000\000\000\000\000\
\000\000\131\000\131\000\187\000\188\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\189\000\190\000\191\000\000\000\000\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\000\000\196\000\197\000\
\000\000\198\000\000\000\192\001\000\000\181\000\000\000\182\000\
\183\000\184\000\185\000\000\000\080\000\186\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\082\000\000\000\199\000\000\000\000\000\000\000\200\000\201\000\
\187\000\188\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\202\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\190\000\191\000\
\000\000\000\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\000\000\196\000\197\000\000\000\198\000\000\000\
\116\002\000\000\127\000\000\000\127\000\127\000\127\000\127\000\
\000\000\127\000\127\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\082\000\000\000\199\000\
\000\000\000\000\000\000\200\000\201\000\127\000\127\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\202\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\000\127\000\127\000\000\000\000\000\127\000\
\127\000\000\000\000\000\127\000\127\000\000\000\000\000\000\000\
\127\000\127\000\000\000\127\000\000\000\127\000\000\000\181\000\
\000\000\182\000\183\000\184\000\185\000\000\000\080\000\186\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\127\000\127\000\000\000\127\000\000\000\000\000\000\000\
\127\000\127\000\187\000\188\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\189\000\
\190\000\191\000\000\000\000\000\192\000\193\000\000\000\000\000\
\194\000\195\000\000\000\000\000\000\000\196\000\197\000\181\000\
\198\000\182\000\183\000\184\000\185\000\000\000\080\000\186\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\000\000\182\000\183\000\184\000\185\000\
\000\000\080\000\186\000\000\000\000\000\000\000\081\000\082\000\
\000\000\199\000\187\000\188\000\000\000\200\000\201\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\202\000\000\000\000\000\000\000\000\000\187\000\188\000\189\000\
\190\000\191\000\000\000\000\000\192\000\193\000\000\000\000\000\
\194\000\195\000\000\000\000\000\000\000\196\000\197\000\000\000\
\242\000\000\000\189\000\190\000\191\000\000\000\000\000\192\000\
\193\000\000\000\000\000\194\000\195\000\000\000\000\000\000\000\
\196\000\197\000\181\000\244\000\182\000\183\000\184\000\185\000\
\000\000\080\000\186\000\000\000\000\000\000\000\081\000\082\000\
\000\000\199\000\000\000\000\000\000\000\200\000\201\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\202\000\081\000\082\000\000\000\199\000\187\000\188\000\000\000\
\200\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\202\000\000\000\000\000\000\000\000\000\
\000\000\000\000\189\000\190\000\191\000\000\000\000\000\192\000\
\193\000\000\000\000\000\194\000\195\000\000\000\000\000\000\000\
\196\000\197\000\181\000\078\001\182\000\183\000\184\000\185\000\
\000\000\080\000\186\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\181\000\000\000\182\000\
\183\000\184\000\185\000\000\000\080\000\186\000\000\000\000\000\
\000\000\081\000\082\000\000\000\199\000\187\000\188\000\000\000\
\200\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\202\000\000\000\000\000\000\000\000\000\
\187\000\188\000\189\000\190\000\191\000\000\000\000\000\192\000\
\193\000\000\000\000\000\194\000\195\000\000\000\000\000\000\000\
\196\000\197\000\000\000\080\001\000\000\189\000\190\000\191\000\
\000\000\000\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\000\000\196\000\197\000\000\000\089\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\082\000\000\000\199\000\000\000\000\000\000\000\
\200\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\202\000\081\000\082\000\000\000\199\000\
\000\000\000\000\000\000\200\000\201\000\000\000\004\000\005\000\
\000\000\000\000\000\000\000\000\006\000\000\000\202\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\004\000\005\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\000\000\122\001\122\001\000\000\
\122\001\122\001\000\000\000\000\000\000\032\000\122\001\000\000\
\000\000\000\000\000\000\122\001\122\001\122\001\122\001\000\000\
\122\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\034\000\035\000\036\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\039\000\040\000\041\000\000\000\042\000\043\000\044\000\000\000\
\000\000\000\000\000\000\122\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\034\000\035\000\036\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\039\000\040\000\041\000\107\000\042\000\
\043\000\044\000\000\000\107\000\000\000\000\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\000\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\000\000\000\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\000\000\107\000\107\000\107\000\000\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\000\
\107\000\107\000\000\000\107\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\107\000\005\000\107\000\
\000\000\000\000\107\000\006\000\080\000\107\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\000\000\014\000\015\000\
\016\000\017\000\000\000\019\000\020\000\021\000\022\000\023\000\
\073\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\005\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\073\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\034\000\035\000\000\000\037\000\081\000\082\000\000\000\000\000\
\000\000\000\000\224\000\000\000\000\000\038\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\034\000\035\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\005\000\039\000\000\000\000\000\000\000\006\000\000\000\044\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\014\000\015\000\016\000\017\000\000\000\019\000\020\000\021\000\
\022\000\023\000\073\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\005\001\000\000\000\000\000\000\000\000\005\001\
\000\000\000\000\005\001\005\001\005\001\005\001\005\001\005\001\
\005\001\000\000\005\001\005\001\005\001\005\001\000\000\005\001\
\005\001\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\005\001\005\001\005\001\005\001\000\000\000\000\000\000\000\000\
\155\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\215\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\034\000\035\000\000\000\037\000\000\000\000\000\
\000\000\005\001\005\001\000\000\000\000\000\000\000\000\038\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\001\005\001\005\001\000\000\005\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\001\005\000\005\001\000\000\000\000\000\000\006\000\
\000\000\005\001\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\015\000\016\000\017\000\000\000\019\000\
\020\000\021\000\022\000\023\000\073\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\005\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\000\014\000\015\000\016\000\017\000\
\000\000\019\000\020\000\021\000\022\000\023\000\073\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\000\000\000\000\
\000\000\000\000\155\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\034\000\035\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\039\000\225\002\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\034\000\035\000\
\000\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\005\000\039\000\000\000\000\000\
\000\000\006\000\000\000\044\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\000\014\000\015\000\016\000\017\000\
\000\000\019\000\020\000\021\000\022\000\023\000\073\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\000\000\014\000\015\000\
\016\000\017\000\000\000\019\000\020\000\021\000\022\000\023\000\
\073\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\034\000\035\000\
\000\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\106\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\034\000\035\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\106\000\039\000\
\000\000\106\000\106\000\000\000\000\000\044\000\106\000\000\000\
\000\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\000\000\106\000\106\000\106\000\000\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\000\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\106\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\000\000\000\106\000\042\000\
\000\000\106\000\042\000\042\000\000\000\000\000\000\000\042\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\042\000\042\000\000\000\042\000\
\042\000\042\000\042\000\000\000\000\000\042\000\000\000\042\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\042\000\
\046\000\000\000\042\000\046\000\046\000\000\000\000\000\000\000\
\046\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\046\000\046\000\046\000\000\000\
\046\000\046\000\046\000\046\000\000\000\000\000\046\000\000\000\
\046\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\046\000\048\000\000\000\046\000\048\000\048\000\000\000\000\000\
\000\000\048\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\048\000\048\000\048\000\
\000\000\048\000\048\000\048\000\048\000\000\000\058\000\048\000\
\000\000\048\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\000\000\048\000\058\000\058\000\000\000\000\000\000\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\048\000\000\000\000\000\048\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\000\000\058\000\058\000\058\000\000\000\058\000\
\058\000\058\000\058\000\000\000\062\000\058\000\000\000\058\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\058\000\
\062\000\062\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\058\000\
\000\000\000\000\000\000\000\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\000\000\000\000\000\000\
\000\000\062\000\062\000\062\000\000\000\062\000\062\000\062\000\
\062\000\000\000\063\000\062\000\000\000\062\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\062\000\063\000\063\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\000\000\000\000\063\000\
\063\000\063\000\000\000\063\000\063\000\063\000\063\000\000\000\
\064\000\063\000\000\000\063\000\000\000\000\000\063\000\063\000\
\063\000\063\000\063\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\000\000\000\063\000\064\000\064\000\000\000\000\000\
\000\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\000\000\063\000\000\000\000\000\000\000\000\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\000\000\000\000\000\000\000\000\064\000\064\000\064\000\
\000\000\064\000\064\000\064\000\064\000\000\000\065\000\064\000\
\000\000\064\000\000\000\000\000\064\000\064\000\064\000\064\000\
\064\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\064\000\065\000\065\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\064\000\000\000\000\000\000\000\000\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\065\000\000\000\065\000\
\065\000\065\000\065\000\000\000\066\000\065\000\000\000\065\000\
\000\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\065\000\
\066\000\066\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\066\000\066\000\000\000\066\000\066\000\066\000\
\066\000\000\000\067\000\066\000\000\000\066\000\000\000\000\000\
\066\000\066\000\066\000\066\000\066\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\066\000\067\000\067\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\067\000\067\000\000\000\067\000\067\000\067\000\067\000\000\000\
\068\000\067\000\000\000\067\000\000\000\000\000\067\000\067\000\
\067\000\067\000\067\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\000\000\067\000\068\000\068\000\000\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\067\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\068\000\068\000\
\069\000\068\000\068\000\069\000\069\000\000\000\000\000\068\000\
\069\000\068\000\000\000\000\000\068\000\068\000\068\000\068\000\
\068\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\069\000\069\000\069\000\069\000\069\000\000\000\000\000\
\000\000\068\000\000\000\000\000\069\000\069\000\069\000\000\000\
\069\000\069\000\070\000\000\000\000\000\000\000\069\000\068\000\
\069\000\068\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\000\000\000\000\070\000\070\000\
\069\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\071\000\000\000\000\000\000\000\000\000\069\000\000\000\
\069\000\000\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\070\000\070\000\071\000\070\000\070\000\071\000\071\000\000\000\
\000\000\070\000\071\000\070\000\000\000\000\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\000\000\000\000\000\000\070\000\000\000\000\000\071\000\071\000\
\071\000\000\000\071\000\071\000\072\000\000\000\000\000\000\000\
\071\000\070\000\071\000\070\000\000\000\071\000\071\000\071\000\
\071\000\071\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\
\072\000\072\000\071\000\000\000\000\000\072\000\000\000\000\000\
\000\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\071\000\000\000\071\000\000\000\000\000\072\000\072\000\072\000\
\072\000\072\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\000\072\000\072\000\073\000\072\000\072\000\073\000\
\073\000\000\000\000\000\072\000\073\000\072\000\000\000\000\000\
\072\000\072\000\072\000\072\000\072\000\072\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\074\000\072\000\000\000\000\000\
\073\000\073\000\073\000\000\000\073\000\073\000\000\000\000\000\
\000\000\000\000\073\000\072\000\073\000\072\000\000\000\073\000\
\073\000\073\000\073\000\073\000\073\000\074\000\000\000\000\000\
\074\000\074\000\000\000\000\000\000\000\074\000\000\000\000\000\
\000\000\000\000\000\000\075\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\074\000\000\000\
\000\000\000\000\073\000\000\000\073\000\000\000\000\000\000\000\
\000\000\074\000\074\000\074\000\075\000\074\000\074\000\075\000\
\075\000\000\000\000\000\074\000\075\000\074\000\000\000\000\000\
\074\000\074\000\074\000\074\000\074\000\074\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\075\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\074\000\000\000\000\000\
\075\000\075\000\075\000\000\000\075\000\075\000\000\000\000\000\
\000\000\000\000\075\000\074\000\075\000\074\000\000\000\075\000\
\075\000\075\000\075\000\075\000\075\000\076\000\000\000\000\000\
\076\000\076\000\000\000\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\000\000\077\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\000\000\075\000\000\000\000\000\000\000\
\000\000\076\000\076\000\076\000\077\000\076\000\076\000\077\000\
\077\000\000\000\000\000\076\000\077\000\076\000\000\000\000\000\
\076\000\076\000\076\000\076\000\076\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\076\000\000\000\000\000\
\077\000\077\000\077\000\000\000\077\000\077\000\000\000\000\000\
\000\000\000\000\077\000\076\000\077\000\076\000\000\000\077\000\
\077\000\077\000\077\000\077\000\077\000\078\000\000\000\000\000\
\078\000\078\000\000\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\000\000\079\000\077\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\077\000\000\000\000\000\000\000\
\000\000\080\000\078\000\078\000\079\000\078\000\078\000\079\000\
\079\000\000\000\000\000\078\000\079\000\078\000\000\000\000\000\
\078\000\078\000\078\000\078\000\078\000\078\000\000\000\000\000\
\000\000\000\000\080\000\000\000\000\000\080\000\080\000\000\000\
\000\000\000\000\080\000\000\000\000\000\078\000\000\000\000\000\
\081\000\079\000\079\000\000\000\079\000\079\000\000\000\000\000\
\000\000\000\000\079\000\078\000\079\000\078\000\000\000\079\000\
\079\000\079\000\079\000\079\000\079\000\000\000\000\000\080\000\
\000\000\081\000\080\000\080\000\081\000\081\000\000\000\000\000\
\080\000\081\000\080\000\000\000\079\000\080\000\080\000\080\000\
\080\000\080\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\079\000\000\000\000\000\000\000\
\000\000\082\000\080\000\000\000\000\000\000\000\081\000\000\000\
\000\000\081\000\081\000\000\000\000\000\000\000\000\000\081\000\
\080\000\081\000\080\000\000\000\081\000\081\000\081\000\081\000\
\081\000\081\000\082\000\000\000\000\000\082\000\082\000\000\000\
\116\001\116\001\082\000\000\000\000\000\000\000\000\000\000\000\
\083\000\081\000\000\000\000\000\116\001\116\001\116\001\000\000\
\116\001\116\001\000\000\000\000\000\000\000\000\116\001\081\000\
\000\000\081\000\000\000\116\001\116\001\116\001\116\001\000\000\
\116\001\083\000\082\000\082\000\083\000\083\000\000\000\000\000\
\082\000\083\000\082\000\000\000\000\000\082\000\082\000\082\000\
\082\000\082\000\082\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\116\001\000\000\000\000\234\000\098\000\
\000\000\083\000\083\000\099\000\000\000\100\000\080\000\083\000\
\082\000\083\000\082\000\000\000\083\000\083\000\083\000\083\000\
\083\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\101\000\000\000\000\000\102\000\000\000\000\000\000\000\
\000\000\083\000\103\000\104\000\000\000\000\000\234\000\098\000\
\000\000\000\000\000\000\099\000\000\000\100\000\080\000\083\000\
\000\000\083\000\000\000\000\000\000\000\000\000\000\000\105\000\
\106\000\107\000\000\000\000\000\108\000\109\000\000\000\000\000\
\110\000\101\000\000\000\000\000\102\000\000\000\000\000\156\001\
\111\000\000\000\103\000\104\000\000\000\000\000\143\001\098\000\
\000\000\000\000\000\000\099\000\000\000\100\000\080\000\000\000\
\112\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\106\000\107\000\000\000\000\000\108\000\109\000\081\000\082\000\
\110\000\101\000\000\000\000\000\102\000\000\000\000\000\000\000\
\111\000\000\000\103\000\104\000\000\000\000\000\040\002\098\000\
\000\000\000\000\000\000\099\000\000\000\100\000\080\000\000\000\
\112\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\106\000\107\000\000\000\000\000\108\000\109\000\081\000\082\000\
\110\000\101\000\000\000\000\000\102\000\000\000\000\000\000\000\
\111\000\000\000\103\000\104\000\000\000\000\000\000\000\098\000\
\000\000\000\000\000\000\099\000\000\000\100\000\080\000\000\000\
\112\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\106\000\107\000\000\000\000\000\108\000\109\000\081\000\082\000\
\110\000\101\000\000\000\000\000\102\000\000\000\000\000\000\000\
\111\000\000\000\103\000\104\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\112\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\106\000\107\000\000\000\000\000\108\000\109\000\081\000\082\000\
\110\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\000\000\000\000\000\000\000\000\000\089\001\089\001\089\001\
\089\001\089\001\089\001\089\001\089\001\089\001\089\001\089\001\
\112\000\089\001\089\001\089\001\000\000\089\001\089\001\089\001\
\089\001\000\000\000\000\089\001\000\000\000\000\081\000\082\000\
\089\001\089\001\089\001\089\001\000\000\089\001\091\001\091\001\
\091\001\091\001\091\001\091\001\091\001\091\001\091\001\091\001\
\091\001\000\000\091\001\091\001\091\001\000\000\091\001\091\001\
\091\001\091\001\000\000\000\000\091\001\000\000\000\000\000\000\
\000\000\091\001\091\001\091\001\091\001\000\000\091\001\000\000\
\089\001\000\000\093\001\093\001\093\001\093\001\093\001\093\001\
\093\001\093\001\093\001\093\001\093\001\000\000\093\001\093\001\
\093\001\000\000\093\001\093\001\093\001\093\001\000\000\000\000\
\093\001\000\000\000\000\000\000\000\000\093\001\093\001\093\001\
\093\001\091\001\093\001\105\001\105\001\105\001\105\001\105\001\
\105\001\105\001\105\001\000\000\000\000\000\000\000\000\105\001\
\105\001\105\001\000\000\105\001\105\001\105\001\105\001\000\000\
\000\000\105\001\000\000\000\000\000\000\000\000\105\001\105\001\
\105\001\105\001\000\000\105\001\000\000\093\001\000\000\106\001\
\106\001\106\001\106\001\106\001\106\001\106\001\106\001\000\000\
\000\000\000\000\000\000\106\001\106\001\106\001\000\000\106\001\
\106\001\106\001\106\001\000\000\000\000\106\001\000\000\000\000\
\000\000\000\000\106\001\106\001\106\001\106\001\105\001\106\001\
\107\001\107\001\107\001\107\001\107\001\107\001\107\001\107\001\
\000\000\000\000\000\000\000\000\107\001\107\001\107\001\000\000\
\107\001\107\001\107\001\107\001\000\000\000\000\107\001\000\000\
\000\000\000\000\000\000\107\001\107\001\107\001\107\001\000\000\
\107\001\000\000\106\001\000\000\108\001\108\001\108\001\108\001\
\108\001\108\001\000\000\000\000\000\000\000\000\000\000\000\000\
\108\001\108\001\108\001\000\000\108\001\108\001\108\001\108\001\
\000\000\000\000\108\001\000\000\000\000\000\000\000\000\108\001\
\108\001\108\001\108\001\107\001\108\001\109\001\109\001\109\001\
\109\001\109\001\109\001\000\000\000\000\000\000\000\000\000\000\
\000\000\109\001\109\001\109\001\000\000\109\001\109\001\109\001\
\109\001\000\000\000\000\109\001\000\000\000\000\000\000\000\000\
\109\001\109\001\109\001\109\001\000\000\109\001\000\000\108\001\
\000\000\110\001\110\001\110\001\110\001\110\001\110\001\000\000\
\000\000\000\000\000\000\000\000\000\000\110\001\110\001\110\001\
\000\000\110\001\110\001\110\001\110\001\000\000\000\000\110\001\
\000\000\000\000\000\000\000\000\110\001\110\001\110\001\110\001\
\109\001\110\001\111\001\111\001\111\001\111\001\111\001\111\001\
\000\000\000\000\000\000\000\000\000\000\000\000\111\001\111\001\
\111\001\000\000\111\001\111\001\000\000\000\000\000\000\000\000\
\111\001\000\000\000\000\000\000\000\000\111\001\111\001\111\001\
\111\001\000\000\111\001\000\000\110\001\000\000\112\001\112\001\
\112\001\112\001\112\001\112\001\000\000\000\000\000\000\000\000\
\000\000\000\000\112\001\112\001\112\001\000\000\112\001\112\001\
\000\000\000\000\000\000\000\000\112\001\000\000\000\000\000\000\
\000\000\112\001\112\001\112\001\112\001\111\001\112\001\113\001\
\113\001\113\001\113\001\113\001\113\001\000\000\000\000\000\000\
\000\000\000\000\000\000\113\001\113\001\113\001\000\000\113\001\
\113\001\000\000\000\000\000\000\000\000\113\001\000\000\000\000\
\000\000\000\000\113\001\113\001\113\001\113\001\000\000\113\001\
\000\000\112\001\000\000\114\001\114\001\114\001\114\001\114\001\
\114\001\000\000\000\000\000\000\000\000\000\000\000\000\114\001\
\114\001\114\001\000\000\114\001\114\001\000\000\000\000\000\000\
\000\000\114\001\000\000\000\000\000\000\000\000\114\001\114\001\
\114\001\114\001\113\001\114\001\115\001\115\001\115\001\115\001\
\115\001\115\001\000\000\000\000\000\000\000\000\000\000\000\000\
\115\001\115\001\115\001\000\000\115\001\115\001\000\000\000\000\
\000\000\000\000\115\001\117\001\117\001\000\000\000\000\115\001\
\115\001\115\001\115\001\000\000\115\001\000\000\114\001\117\001\
\117\001\117\001\000\000\117\001\117\001\000\000\000\000\000\000\
\000\000\117\001\118\001\118\001\000\000\000\000\117\001\117\001\
\117\001\117\001\000\000\117\001\000\000\000\000\118\001\118\001\
\118\001\000\000\118\001\118\001\000\000\000\000\000\000\115\001\
\118\001\000\000\000\000\000\000\000\000\118\001\118\001\118\001\
\118\001\000\000\118\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\117\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\118\001\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\000\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\023\000\023\000\000\000\023\000\000\000\018\000\
\000\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\000\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\000\000\000\000\023\000\000\000\000\000\023\000\023\000\
\000\000\023\000"

let yycheck = "\024\000\
\004\000\053\000\156\000\001\000\002\000\032\000\145\000\065\000\
\000\000\083\000\021\001\000\000\042\001\135\000\198\000\076\000\
\041\000\228\000\000\000\049\000\084\000\048\000\155\000\035\001\
\200\001\033\001\058\001\059\001\049\000\001\001\165\000\166\000\
\001\001\001\001\032\000\014\000\015\000\080\001\017\000\007\001\
\098\000\041\000\008\001\079\000\008\001\076\002\000\001\050\001\
\079\002\000\001\048\000\082\002\059\001\015\000\131\002\017\000\
\001\000\002\000\242\000\095\000\244\000\105\000\106\000\107\000\
\108\000\109\000\110\000\029\003\000\001\094\000\000\001\096\000\
\079\001\080\001\077\001\118\001\038\003\000\001\232\000\001\001\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\059\001\
\030\001\068\000\001\001\059\001\034\001\072\000\074\001\131\000\
\007\001\001\001\059\001\078\000\001\000\002\000\074\001\007\001\
\116\002\074\001\074\001\069\000\080\001\170\000\000\001\111\000\
\173\000\174\000\175\000\016\000\193\002\178\000\179\000\080\001\
\000\001\133\002\076\001\024\000\025\000\076\001\156\000\028\000\
\029\000\080\001\081\001\032\000\130\000\034\000\035\000\156\000\
\074\001\059\001\104\001\105\001\104\001\105\001\156\000\207\000\
\076\001\075\001\198\000\048\000\080\001\050\000\078\001\123\001\
\080\001\076\001\055\000\123\001\057\000\001\001\074\001\060\000\
\198\000\089\001\000\001\007\001\030\001\076\001\196\001\059\001\
\034\001\035\001\098\001\099\001\073\000\050\001\189\000\190\000\
\191\000\192\000\193\000\194\000\100\002\060\001\083\000\214\002\
\008\001\009\001\076\001\079\001\219\002\201\001\242\000\002\001\
\244\000\225\001\095\000\225\000\076\001\224\000\153\001\154\001\
\212\001\074\001\001\001\228\000\242\000\075\001\244\000\163\002\
\007\001\092\001\080\001\232\000\123\001\238\000\001\001\003\001\
\004\001\005\001\232\000\123\001\007\001\059\001\001\001\073\001\
\035\001\140\002\224\000\077\001\007\001\130\000\074\001\081\001\
\080\002\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\033\001\155\000\197\001\
\061\001\031\001\002\001\064\001\175\002\217\002\078\001\028\001\
\000\001\074\001\082\001\000\001\073\001\211\001\068\001\213\001\
\077\001\053\001\000\001\074\001\000\001\000\001\001\001\123\001\
\104\001\105\001\078\001\063\001\080\001\083\001\073\001\074\001\
\099\001\078\001\077\001\046\002\081\001\089\001\081\001\074\001\
\078\001\198\000\080\001\099\001\049\001\050\001\113\001\003\003\
\115\001\068\001\058\002\089\001\074\001\157\002\050\001\159\002\
\160\002\113\001\038\001\001\001\164\002\097\001\000\000\075\001\
\083\001\007\001\073\001\224\000\123\001\081\001\108\001\109\001\
\077\001\076\001\081\001\197\001\101\001\073\001\001\001\201\001\
\123\001\077\001\076\001\075\001\007\001\242\000\073\001\244\000\
\123\001\211\001\212\001\213\001\001\001\001\001\081\001\073\001\
\076\001\039\002\202\002\007\001\080\001\081\001\140\001\081\001\
\074\001\209\002\000\001\122\001\123\001\124\001\125\001\126\001\
\127\001\128\001\129\001\130\001\131\001\132\001\133\001\134\001\
\135\001\136\001\137\001\138\001\139\001\104\001\105\001\135\002\
\153\001\154\001\069\001\070\001\206\001\073\001\076\001\073\001\
\059\001\000\001\001\001\079\001\078\001\079\001\080\001\044\001\
\007\001\249\002\073\001\205\001\001\001\050\001\073\001\074\001\
\079\001\001\003\077\001\074\001\192\001\099\001\081\001\074\001\
\038\001\074\001\000\001\001\001\106\002\195\001\008\001\079\001\
\076\001\017\003\231\001\113\001\027\001\039\002\001\001\030\001\
\001\001\078\001\208\001\080\001\007\001\123\001\007\001\059\001\
\060\001\061\001\069\002\086\002\089\001\088\002\118\002\119\002\
\091\002\229\001\076\001\073\001\059\001\098\001\099\001\097\002\
\123\001\079\001\080\001\081\001\242\001\243\001\001\001\076\001\
\206\001\213\001\073\001\074\001\007\001\192\001\077\001\123\001\
\079\001\080\001\081\001\001\001\076\001\059\001\103\000\104\000\
\078\001\007\001\001\001\081\001\075\001\127\002\245\001\073\001\
\007\001\080\001\079\001\073\001\074\001\079\001\001\001\077\001\
\106\002\079\001\080\001\081\001\007\001\063\001\073\001\074\001\
\073\001\074\001\077\001\059\001\077\001\001\001\081\001\001\001\
\081\001\064\001\200\002\007\001\123\001\007\001\104\001\105\001\
\079\001\065\001\074\001\082\001\086\002\077\001\088\002\051\002\
\074\001\091\002\067\001\077\001\001\001\046\002\058\002\080\001\
\062\002\076\001\081\001\149\002\038\001\123\001\106\001\083\002\
\053\001\054\001\055\001\056\001\074\001\075\002\063\002\077\001\
\123\001\077\002\123\001\200\001\080\001\076\001\057\001\058\001\
\099\001\206\001\187\000\188\000\059\001\060\001\061\001\059\001\
\081\001\076\001\080\001\196\000\197\000\073\001\113\001\101\002\
\051\001\052\001\059\001\097\002\099\001\038\001\074\001\050\002\
\123\001\077\001\076\001\081\001\097\002\073\001\200\002\001\001\
\116\002\203\002\113\001\057\001\058\001\123\001\069\001\070\001\
\086\002\163\002\088\002\213\002\123\001\091\002\130\002\002\001\
\081\001\133\002\076\001\135\002\051\001\052\001\129\002\080\001\
\123\001\075\001\127\002\049\001\050\001\073\001\074\001\126\002\
\000\001\077\001\002\001\153\002\076\001\081\001\156\002\123\001\
\027\001\123\001\075\001\030\001\031\001\163\002\076\001\002\001\
\035\001\071\001\072\001\129\002\074\001\000\001\001\001\077\001\
\002\001\116\002\001\001\027\001\074\001\120\002\030\001\031\001\
\174\002\080\001\081\001\035\001\096\001\097\001\000\001\074\001\
\027\001\074\001\133\002\030\001\031\001\074\001\194\002\063\001\
\035\001\027\001\080\001\081\001\030\001\031\001\081\001\074\001\
\220\002\035\001\077\001\080\001\081\001\065\001\210\002\073\001\
\166\002\167\002\064\001\217\002\078\001\079\001\080\001\081\001\
\067\001\086\002\073\001\088\002\038\001\073\001\091\002\073\001\
\099\001\125\001\126\001\102\001\127\001\128\001\250\002\100\002\
\053\001\054\001\055\001\056\001\133\001\134\001\113\001\073\001\
\115\001\075\001\081\001\099\001\078\001\079\001\080\001\081\001\
\082\001\118\002\119\002\073\001\118\001\003\003\073\001\073\001\
\099\001\113\001\076\001\115\001\129\002\079\001\080\001\081\001\
\005\001\099\001\129\001\130\001\131\001\132\001\113\001\140\002\
\115\001\010\001\011\001\012\001\013\001\005\001\015\003\113\001\
\028\003\115\001\006\001\007\001\073\001\008\001\009\001\014\001\
\015\001\000\001\001\001\002\001\005\001\118\001\163\002\075\001\
\007\001\075\001\073\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\175\002\018\001\019\001\020\001\021\001\075\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\001\001\000\001\001\001\
\002\001\110\001\073\001\075\001\079\001\007\001\073\001\000\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\073\001\
\018\001\019\001\020\001\021\001\059\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\073\001\074\001\081\001\080\001\077\001\068\001\
\079\001\080\001\081\001\075\001\073\001\038\001\081\001\075\001\
\075\001\078\001\079\001\080\001\081\001\075\001\083\001\073\001\
\073\001\059\001\073\001\001\001\099\001\100\001\101\001\075\001\
\103\001\073\001\080\001\074\001\073\001\078\001\073\001\073\001\
\074\001\079\001\113\001\077\001\115\001\079\001\080\001\081\001\
\073\001\001\001\121\001\076\001\123\001\001\001\079\001\080\001\
\081\001\118\001\074\001\081\001\080\001\080\001\077\001\075\001\
\075\001\099\001\100\001\101\001\075\001\103\001\075\001\073\001\
\073\001\073\001\073\001\081\001\073\001\081\001\081\001\113\001\
\073\001\115\001\078\001\000\001\001\001\002\001\081\001\121\001\
\079\001\123\001\007\001\081\001\076\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\076\001\018\001\019\001\020\001\
\021\001\076\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\081\001\
\000\001\001\001\002\001\038\001\079\001\075\001\073\001\007\001\
\073\001\073\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\079\001\018\001\019\001\020\001\021\001\059\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\073\001\074\001\080\001\080\001\
\077\001\074\001\079\001\080\001\081\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\079\001\074\001\080\001\059\001\075\001\081\001\099\001\100\001\
\101\001\073\001\103\001\080\001\075\001\080\001\073\001\080\001\
\078\001\073\001\074\001\080\001\113\001\077\001\115\001\079\001\
\080\001\081\001\079\001\002\001\121\001\074\001\123\001\091\001\
\000\001\001\001\073\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\073\001\099\001\100\001\101\001\078\001\103\001\
\075\001\073\001\073\001\080\001\027\001\075\001\075\001\030\001\
\031\001\113\001\098\001\115\001\035\001\080\001\008\001\001\001\
\078\001\121\001\079\001\123\001\036\001\037\001\038\001\067\001\
\068\001\080\001\080\001\079\001\077\001\073\001\073\001\073\001\
\001\001\079\001\078\001\079\001\080\001\081\001\078\001\083\001\
\081\001\057\001\058\001\059\001\080\001\074\001\062\001\063\001\
\079\001\073\001\066\001\067\001\073\001\081\001\073\001\071\001\
\072\001\073\001\074\001\016\000\076\001\077\001\078\001\079\001\
\080\001\081\001\075\001\000\001\025\000\080\001\073\001\028\000\
\029\000\073\001\118\001\073\001\099\001\034\000\035\000\102\001\
\075\001\073\001\073\001\080\001\077\001\075\001\075\001\075\001\
\104\001\105\001\113\001\107\001\115\001\080\001\079\001\111\001\
\112\001\075\001\055\000\075\001\057\000\078\001\074\001\073\001\
\002\000\080\001\122\001\123\001\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\080\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\111\001\112\001\113\001\114\001\115\001\116\001\
\117\001\118\001\119\001\120\001\121\001\073\001\073\001\073\001\
\073\001\130\000\201\001\186\002\054\001\057\001\058\001\059\001\
\193\002\067\002\062\001\063\001\066\002\031\001\066\001\067\001\
\142\000\230\001\135\001\071\001\072\001\137\001\074\001\075\001\
\076\001\136\001\138\001\101\002\080\001\139\001\126\002\253\002\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\092\001\093\001\094\001\095\001\203\002\016\001\216\001\099\001\
\100\001\101\001\102\001\103\001\104\001\105\001\174\002\107\001\
\162\000\017\001\110\001\111\001\112\001\113\001\114\001\115\001\
\116\001\117\001\018\001\020\001\019\001\121\001\122\001\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\038\003\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\019\003\255\255\255\255\021\003\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\057\001\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\066\001\067\001\255\255\255\255\255\255\071\001\072\001\
\255\255\074\001\075\001\076\001\255\255\255\255\255\255\080\001\
\255\255\255\255\255\255\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\092\001\093\001\094\001\095\001\255\255\
\255\255\255\255\099\001\100\001\101\001\102\001\103\001\104\001\
\105\001\255\255\107\001\255\255\255\255\255\255\111\001\112\001\
\113\001\114\001\115\001\116\001\117\001\255\255\255\255\255\255\
\121\001\122\001\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\066\001\067\001\255\255\255\255\
\255\255\071\001\072\001\255\255\074\001\075\001\076\001\255\255\
\255\255\255\255\080\001\255\255\255\255\255\255\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\092\001\093\001\
\094\001\095\001\255\255\255\255\255\255\099\001\100\001\101\001\
\102\001\103\001\104\001\105\001\255\255\107\001\255\255\255\255\
\255\255\111\001\112\001\113\001\114\001\115\001\116\001\117\001\
\255\255\255\255\255\255\121\001\122\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\255\255\066\001\
\067\001\255\255\255\255\255\255\071\001\072\001\255\255\074\001\
\255\255\076\001\255\255\255\255\255\255\080\001\255\255\255\255\
\255\255\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\094\001\095\001\255\255\255\255\255\255\
\099\001\100\001\101\001\102\001\103\001\104\001\105\001\255\255\
\107\001\255\255\255\255\255\255\111\001\112\001\113\001\114\001\
\115\001\116\001\117\001\255\255\255\255\255\255\121\001\122\001\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\067\001\068\001\
\255\255\255\255\255\255\255\255\073\001\255\255\255\255\255\255\
\255\255\078\001\079\001\080\001\081\001\255\255\083\001\255\255\
\255\255\057\001\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\066\001\067\001\255\255\255\255\068\001\071\001\
\072\001\255\255\074\001\073\001\076\001\255\255\255\255\255\255\
\078\001\079\001\080\001\081\001\255\255\083\001\255\255\255\255\
\255\255\118\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\099\001\100\001\101\001\255\255\103\001\
\104\001\105\001\255\255\107\001\255\255\255\255\255\255\111\001\
\112\001\113\001\255\255\115\001\255\255\255\255\255\255\255\255\
\118\001\121\001\122\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\057\001\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\066\001\067\001\255\255\
\255\255\255\255\071\001\072\001\255\255\074\001\255\255\255\255\
\255\255\255\255\255\255\000\001\001\001\255\255\003\001\004\001\
\005\001\006\001\255\255\008\001\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\099\001\100\001\
\101\001\255\255\103\001\104\001\105\001\255\255\107\001\255\255\
\255\255\255\255\111\001\112\001\113\001\255\255\115\001\036\001\
\037\001\255\255\255\255\255\255\121\001\122\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\057\001\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\066\001\067\001\255\255\
\255\255\255\255\071\001\072\001\255\255\074\001\075\001\076\001\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\084\001\
\085\001\086\001\087\001\088\001\089\001\090\001\091\001\092\001\
\093\001\094\001\095\001\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\255\255\104\001\105\001\255\255\107\001\255\255\
\255\255\255\255\111\001\112\001\255\255\114\001\000\001\001\001\
\255\255\003\001\004\001\005\001\006\001\122\001\008\001\009\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\255\255\067\001\068\001\069\001\070\001\255\255\255\255\
\073\001\255\255\036\001\037\001\077\001\078\001\079\001\080\001\
\081\001\255\255\083\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\071\001\072\001\255\255\
\074\001\255\255\076\001\255\255\255\255\118\001\080\001\255\255\
\255\255\255\255\084\001\085\001\086\001\087\001\088\001\089\001\
\090\001\091\001\092\001\093\001\094\001\095\001\255\255\255\255\
\255\255\255\255\255\255\255\255\102\001\255\255\104\001\105\001\
\255\255\107\001\255\255\255\255\255\255\111\001\112\001\255\255\
\114\001\000\001\001\001\255\255\003\001\004\001\005\001\006\001\
\122\001\008\001\009\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\002\001\067\001\068\001\069\001\
\070\001\255\255\255\255\073\001\255\255\036\001\037\001\077\001\
\078\001\255\255\080\001\081\001\255\255\083\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\030\001\031\001\057\001\058\001\059\001\035\001\255\255\062\001\
\063\001\255\255\255\255\066\001\067\001\255\255\255\255\255\255\
\071\001\072\001\255\255\074\001\255\255\076\001\255\255\255\255\
\118\001\080\001\255\255\255\255\255\255\084\001\085\001\086\001\
\087\001\088\001\089\001\090\001\091\001\092\001\093\001\094\001\
\095\001\255\255\255\255\255\255\074\001\255\255\255\255\102\001\
\255\255\104\001\105\001\255\255\107\001\255\255\255\255\255\255\
\111\001\112\001\001\001\114\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\122\001\255\255\099\001\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\113\001\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\030\001\031\001\255\255\050\001\255\255\035\001\255\255\255\255\
\255\255\255\255\057\001\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\066\001\067\001\255\255\255\255\255\255\
\071\001\072\001\255\255\074\001\255\255\076\001\077\001\000\001\
\001\001\255\255\003\001\004\001\005\001\006\001\068\001\008\001\
\009\001\255\255\255\255\073\001\255\255\075\001\255\255\255\255\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\255\255\
\255\255\104\001\105\001\255\255\107\001\255\255\255\255\255\255\
\111\001\112\001\255\255\036\001\037\001\099\001\255\255\255\255\
\255\255\255\255\255\255\122\001\123\001\255\255\255\255\255\255\
\255\255\255\255\255\255\113\001\255\255\115\001\255\255\255\255\
\057\001\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\066\001\067\001\255\255\255\255\255\255\071\001\072\001\
\255\255\074\001\255\255\255\255\255\255\000\001\001\001\080\001\
\003\001\004\001\005\001\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\255\255\255\255\255\255\104\001\
\105\001\255\255\107\001\255\255\255\255\255\255\111\001\112\001\
\255\255\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\122\001\027\001\255\255\255\255\030\001\031\001\255\255\
\255\255\255\255\035\001\255\255\255\255\255\255\057\001\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\255\255\066\001\
\067\001\255\255\255\255\255\255\071\001\072\001\255\255\074\001\
\255\255\255\255\255\255\078\001\000\001\001\001\255\255\003\001\
\004\001\005\001\006\001\068\001\008\001\009\001\255\255\255\255\
\073\001\255\255\075\001\255\255\255\255\078\001\079\001\080\001\
\081\001\082\001\083\001\255\255\255\255\104\001\105\001\255\255\
\107\001\255\255\255\255\255\255\111\001\112\001\255\255\255\255\
\036\001\037\001\099\001\255\255\255\255\255\255\255\255\122\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\113\001\255\255\115\001\255\255\255\255\057\001\058\001\059\001\
\255\255\255\255\062\001\063\001\255\255\255\255\066\001\067\001\
\255\255\255\255\255\255\071\001\072\001\255\255\074\001\255\255\
\255\255\000\001\001\001\255\255\003\001\004\001\005\001\006\001\
\064\001\008\001\009\001\067\001\068\001\255\255\255\255\255\255\
\255\255\073\001\255\255\002\001\255\255\255\255\078\001\079\001\
\080\001\081\001\255\255\083\001\104\001\105\001\255\255\107\001\
\255\255\255\255\255\255\111\001\112\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\027\001\255\255\122\001\030\001\
\031\001\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001\059\001\255\255\118\001\062\001\
\063\001\255\255\255\255\066\001\067\001\255\255\255\255\255\255\
\071\001\072\001\255\255\074\001\255\255\255\255\000\001\001\001\
\255\255\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\074\001\255\255\255\255\077\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\104\001\105\001\255\255\107\001\255\255\255\255\255\255\
\111\001\112\001\036\001\037\001\099\001\255\255\255\255\102\001\
\255\255\255\255\255\255\122\001\255\255\255\255\255\255\255\255\
\255\255\255\255\113\001\255\255\115\001\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\071\001\072\001\255\255\
\074\001\255\255\255\255\000\001\001\001\255\255\003\001\004\001\
\005\001\006\001\064\001\008\001\009\001\067\001\068\001\255\255\
\255\255\255\255\255\255\073\001\255\255\255\255\255\255\255\255\
\078\001\079\001\080\001\081\001\255\255\083\001\104\001\105\001\
\255\255\107\001\255\255\255\255\255\255\111\001\112\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\122\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\057\001\058\001\059\001\255\255\
\118\001\062\001\063\001\255\255\255\255\066\001\067\001\255\255\
\255\255\255\255\071\001\072\001\255\255\074\001\255\255\255\255\
\000\001\001\001\255\255\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\104\001\105\001\255\255\107\001\255\255\
\255\255\255\255\111\001\112\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\122\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\057\001\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\066\001\067\001\255\255\255\255\255\255\071\001\
\072\001\255\255\074\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\104\001\105\001\255\255\107\001\255\255\255\255\255\255\111\001\
\112\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\122\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\066\001\067\001\255\255\255\255\
\255\255\071\001\072\001\255\255\074\001\255\255\255\255\255\255\
\063\001\064\001\065\001\255\255\067\001\068\001\255\255\255\255\
\255\255\255\255\073\001\255\255\255\255\255\255\255\255\078\001\
\079\001\080\001\081\001\255\255\083\001\099\001\100\001\101\001\
\255\255\103\001\104\001\105\001\255\255\107\001\255\255\255\255\
\255\255\111\001\112\001\113\001\255\255\115\001\000\001\255\255\
\002\001\255\255\255\255\121\001\122\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\118\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\063\001\064\001\065\001\255\255\067\001\068\001\
\255\255\255\255\255\255\255\255\073\001\255\255\255\255\255\255\
\255\255\078\001\079\001\080\001\081\001\255\255\083\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\064\001\065\001\080\001\067\001\
\068\001\255\255\255\255\255\255\255\255\073\001\255\255\255\255\
\255\255\118\001\078\001\079\001\080\001\081\001\255\255\083\001\
\255\255\099\001\100\001\101\001\255\255\103\001\036\001\037\001\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\113\001\
\255\255\115\001\116\001\117\001\255\255\255\255\255\255\121\001\
\255\255\255\255\255\255\057\001\058\001\059\001\255\255\255\255\
\062\001\063\001\118\001\255\255\066\001\067\001\255\255\255\255\
\255\255\071\001\072\001\255\255\074\001\255\255\076\001\255\255\
\001\001\255\255\003\001\004\001\005\001\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\104\001\105\001\255\255\107\001\255\255\255\255\
\255\255\111\001\112\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\122\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\057\001\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\066\001\067\001\255\255\255\255\255\255\071\001\072\001\
\255\255\074\001\255\255\076\001\255\255\001\001\255\255\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\104\001\
\105\001\255\255\107\001\255\255\255\255\255\255\111\001\112\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\122\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\057\001\058\001\059\001\
\255\255\255\255\062\001\063\001\255\255\255\255\066\001\067\001\
\255\255\255\255\255\255\071\001\072\001\255\255\074\001\255\255\
\076\001\255\255\001\001\255\255\003\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\104\001\105\001\255\255\107\001\
\255\255\255\255\255\255\111\001\112\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\122\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\066\001\067\001\255\255\255\255\255\255\
\071\001\072\001\255\255\074\001\255\255\076\001\255\255\001\001\
\255\255\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\104\001\105\001\255\255\107\001\255\255\255\255\255\255\
\111\001\112\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\122\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\071\001\072\001\001\001\
\074\001\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\104\001\105\001\
\255\255\107\001\036\001\037\001\255\255\111\001\112\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\122\001\255\255\255\255\255\255\255\255\036\001\037\001\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\066\001\067\001\255\255\255\255\255\255\071\001\072\001\255\255\
\074\001\255\255\057\001\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\066\001\067\001\255\255\255\255\255\255\
\071\001\072\001\001\001\074\001\003\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\104\001\105\001\
\255\255\107\001\255\255\255\255\255\255\111\001\112\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\122\001\104\001\105\001\255\255\107\001\036\001\037\001\255\255\
\111\001\112\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\122\001\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\066\001\067\001\255\255\255\255\255\255\
\071\001\072\001\001\001\074\001\003\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\104\001\105\001\255\255\107\001\036\001\037\001\255\255\
\111\001\112\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\122\001\255\255\255\255\255\255\255\255\
\036\001\037\001\057\001\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\066\001\067\001\255\255\255\255\255\255\
\071\001\072\001\255\255\074\001\255\255\057\001\058\001\059\001\
\255\255\255\255\062\001\063\001\255\255\255\255\066\001\067\001\
\255\255\255\255\255\255\071\001\072\001\255\255\074\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\104\001\105\001\255\255\107\001\255\255\255\255\255\255\
\111\001\112\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\122\001\104\001\105\001\255\255\107\001\
\255\255\255\255\255\255\111\001\112\001\255\255\001\001\002\001\
\255\255\255\255\255\255\255\255\007\001\255\255\122\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\001\001\002\001\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\064\001\065\001\255\255\
\067\001\068\001\255\255\255\255\255\255\080\001\073\001\255\255\
\255\255\255\255\255\255\078\001\079\001\080\001\081\001\255\255\
\083\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\099\001\100\001\101\001\102\001\103\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\116\001\117\001\255\255\119\001\120\001\121\001\255\255\
\255\255\255\255\255\255\118\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\099\001\100\001\101\001\102\001\103\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\113\001\255\255\115\001\116\001\117\001\002\001\119\001\
\120\001\121\001\255\255\007\001\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\255\255\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\099\001\
\100\001\101\001\255\255\103\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\002\001\115\001\
\255\255\255\255\118\001\007\001\008\001\121\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\002\001\255\255\255\255\255\255\255\255\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\099\001\
\100\001\101\001\255\255\103\001\104\001\105\001\255\255\255\255\
\255\255\255\255\076\001\255\255\255\255\113\001\255\255\115\001\
\255\255\255\255\255\255\255\255\255\255\121\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\100\001\101\001\255\255\103\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\113\001\
\002\001\115\001\255\255\255\255\255\255\007\001\255\255\121\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\002\001\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\099\001\100\001\101\001\255\255\103\001\255\255\255\255\
\255\255\073\001\074\001\255\255\255\255\255\255\255\255\113\001\
\255\255\115\001\255\255\255\255\255\255\255\255\255\255\121\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\099\001\100\001\101\001\255\255\103\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\113\001\002\001\115\001\255\255\255\255\255\255\007\001\
\255\255\121\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\002\001\255\255\255\255\255\255\
\255\255\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\074\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\099\001\100\001\101\001\255\255\103\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\113\001\255\255\115\001\082\001\255\255\255\255\255\255\
\255\255\121\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\099\001\100\001\101\001\
\255\255\103\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\113\001\002\001\115\001\255\255\255\255\
\255\255\007\001\255\255\121\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\099\001\100\001\101\001\
\255\255\103\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\113\001\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\121\001\255\255\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\099\001\
\100\001\101\001\255\255\103\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\027\001\115\001\
\255\255\030\001\031\001\255\255\255\255\121\001\035\001\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\255\255\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\255\255\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\099\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\113\001\255\255\115\001\027\001\
\255\255\118\001\030\001\031\001\255\255\255\255\255\255\035\001\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\255\255\067\001\
\068\001\069\001\070\001\255\255\255\255\073\001\255\255\075\001\
\255\255\255\255\078\001\079\001\080\001\081\001\082\001\083\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\099\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\255\255\115\001\
\027\001\255\255\118\001\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\255\255\
\067\001\068\001\069\001\070\001\255\255\255\255\073\001\255\255\
\075\001\255\255\255\255\078\001\079\001\080\001\081\001\082\001\
\083\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\099\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\027\001\255\255\118\001\030\001\031\001\255\255\255\255\
\255\255\035\001\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\255\255\067\001\068\001\069\001\070\001\255\255\002\001\073\001\
\255\255\075\001\255\255\255\255\078\001\079\001\080\001\081\001\
\082\001\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\099\001\030\001\031\001\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\113\001\
\255\255\115\001\255\255\255\255\118\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\255\255\067\001\
\068\001\069\001\070\001\255\255\002\001\073\001\255\255\075\001\
\255\255\255\255\078\001\079\001\080\001\081\001\082\001\083\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\099\001\
\030\001\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\255\255\115\001\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\255\255\255\255\
\255\255\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\255\255\002\001\073\001\255\255\075\001\255\255\255\255\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\099\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\113\001\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\255\255\255\255\255\255\063\001\
\064\001\065\001\255\255\067\001\068\001\069\001\070\001\255\255\
\002\001\073\001\255\255\075\001\255\255\255\255\078\001\079\001\
\080\001\081\001\082\001\083\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\099\001\030\001\031\001\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\113\001\255\255\115\001\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\255\255\255\255\255\255\063\001\064\001\065\001\
\255\255\067\001\068\001\069\001\070\001\255\255\002\001\073\001\
\255\255\075\001\255\255\255\255\078\001\079\001\080\001\081\001\
\082\001\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\099\001\030\001\031\001\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\113\001\
\255\255\115\001\255\255\255\255\255\255\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\255\255\255\255\
\255\255\255\255\255\255\063\001\064\001\065\001\255\255\067\001\
\068\001\069\001\070\001\255\255\002\001\073\001\255\255\075\001\
\255\255\255\255\078\001\079\001\080\001\081\001\082\001\083\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\099\001\
\030\001\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\255\255\115\001\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\255\255\255\255\255\255\
\255\255\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\255\255\002\001\073\001\255\255\075\001\255\255\255\255\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\099\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\113\001\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\063\001\
\064\001\065\001\255\255\067\001\068\001\069\001\070\001\255\255\
\002\001\073\001\255\255\075\001\255\255\255\255\078\001\079\001\
\080\001\081\001\082\001\083\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\099\001\030\001\031\001\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\113\001\255\255\115\001\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\255\255\255\255\255\255\255\255\063\001\064\001\065\001\
\027\001\067\001\068\001\030\001\031\001\255\255\255\255\073\001\
\035\001\075\001\255\255\255\255\078\001\079\001\080\001\081\001\
\082\001\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\255\255\099\001\255\255\255\255\063\001\064\001\065\001\255\255\
\067\001\068\001\002\001\255\255\255\255\255\255\073\001\113\001\
\075\001\115\001\255\255\078\001\079\001\080\001\081\001\082\001\
\083\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\030\001\031\001\
\099\001\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\063\001\
\064\001\065\001\027\001\067\001\068\001\030\001\031\001\255\255\
\255\255\073\001\035\001\075\001\255\255\255\255\078\001\079\001\
\080\001\081\001\082\001\083\001\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\255\255\099\001\255\255\255\255\063\001\064\001\
\065\001\255\255\067\001\068\001\002\001\255\255\255\255\255\255\
\073\001\113\001\075\001\115\001\255\255\078\001\079\001\080\001\
\081\001\082\001\083\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\030\001\031\001\099\001\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\255\255\255\255\
\113\001\255\255\115\001\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\255\255\255\255\255\255\
\255\255\063\001\064\001\065\001\027\001\067\001\068\001\030\001\
\031\001\255\255\255\255\073\001\035\001\075\001\255\255\255\255\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\099\001\255\255\255\255\
\063\001\064\001\065\001\255\255\067\001\068\001\255\255\255\255\
\255\255\255\255\073\001\113\001\075\001\115\001\255\255\078\001\
\079\001\080\001\081\001\082\001\083\001\027\001\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\002\001\099\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\255\255\
\255\255\255\255\113\001\255\255\115\001\255\255\255\255\255\255\
\255\255\063\001\064\001\065\001\027\001\067\001\068\001\030\001\
\031\001\255\255\255\255\073\001\035\001\075\001\255\255\255\255\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\099\001\255\255\255\255\
\063\001\064\001\065\001\255\255\067\001\068\001\255\255\255\255\
\255\255\255\255\073\001\113\001\075\001\115\001\255\255\078\001\
\079\001\080\001\081\001\082\001\083\001\027\001\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\002\001\099\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\113\001\255\255\115\001\255\255\255\255\255\255\
\255\255\063\001\064\001\065\001\027\001\067\001\068\001\030\001\
\031\001\255\255\255\255\073\001\035\001\075\001\255\255\255\255\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\099\001\255\255\255\255\
\063\001\064\001\065\001\255\255\067\001\068\001\255\255\255\255\
\255\255\255\255\073\001\113\001\075\001\115\001\255\255\078\001\
\079\001\080\001\081\001\082\001\083\001\027\001\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\002\001\099\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\113\001\255\255\115\001\255\255\255\255\255\255\
\255\255\002\001\064\001\065\001\027\001\067\001\068\001\030\001\
\031\001\255\255\255\255\073\001\035\001\075\001\255\255\255\255\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\255\255\
\255\255\255\255\027\001\255\255\255\255\030\001\031\001\255\255\
\255\255\255\255\035\001\255\255\255\255\099\001\255\255\255\255\
\002\001\064\001\065\001\255\255\067\001\068\001\255\255\255\255\
\255\255\255\255\073\001\113\001\075\001\115\001\255\255\078\001\
\079\001\080\001\081\001\082\001\083\001\255\255\255\255\064\001\
\255\255\027\001\067\001\068\001\030\001\031\001\255\255\255\255\
\073\001\035\001\075\001\255\255\099\001\078\001\079\001\080\001\
\081\001\082\001\083\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\113\001\255\255\115\001\255\255\255\255\255\255\
\255\255\002\001\099\001\255\255\255\255\255\255\064\001\255\255\
\255\255\067\001\068\001\255\255\255\255\255\255\255\255\073\001\
\113\001\075\001\115\001\255\255\078\001\079\001\080\001\081\001\
\082\001\083\001\027\001\255\255\255\255\030\001\031\001\255\255\
\051\001\052\001\035\001\255\255\255\255\255\255\255\255\255\255\
\002\001\099\001\255\255\255\255\063\001\064\001\065\001\255\255\
\067\001\068\001\255\255\255\255\255\255\255\255\073\001\113\001\
\255\255\115\001\255\255\078\001\079\001\080\001\081\001\255\255\
\083\001\027\001\067\001\068\001\030\001\031\001\255\255\255\255\
\073\001\035\001\075\001\255\255\255\255\078\001\079\001\080\001\
\081\001\082\001\083\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\099\001\118\001\255\255\255\255\000\001\001\001\
\255\255\067\001\068\001\005\001\255\255\007\001\008\001\073\001\
\113\001\075\001\115\001\255\255\078\001\079\001\080\001\081\001\
\082\001\083\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\255\255\030\001\255\255\255\255\255\255\
\255\255\099\001\036\001\037\001\255\255\255\255\000\001\001\001\
\255\255\255\255\255\255\005\001\255\255\007\001\008\001\113\001\
\255\255\115\001\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\066\001\027\001\255\255\255\255\030\001\255\255\255\255\073\001\
\074\001\255\255\036\001\037\001\255\255\255\255\000\001\001\001\
\255\255\255\255\255\255\005\001\255\255\007\001\008\001\255\255\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\104\001\105\001\
\066\001\027\001\255\255\255\255\030\001\255\255\255\255\255\255\
\074\001\255\255\036\001\037\001\255\255\255\255\000\001\001\001\
\255\255\255\255\255\255\005\001\255\255\007\001\008\001\255\255\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\104\001\105\001\
\066\001\027\001\255\255\255\255\030\001\255\255\255\255\255\255\
\074\001\255\255\036\001\037\001\255\255\255\255\255\255\001\001\
\255\255\255\255\255\255\005\001\255\255\007\001\008\001\255\255\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\104\001\105\001\
\066\001\027\001\255\255\255\255\030\001\255\255\255\255\255\255\
\074\001\255\255\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\090\001\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\062\001\063\001\104\001\105\001\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\074\001\255\255\255\255\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\090\001\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\255\255\255\255\073\001\255\255\255\255\104\001\105\001\
\078\001\079\001\080\001\081\001\255\255\083\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\255\255\067\001\068\001\
\069\001\070\001\255\255\255\255\073\001\255\255\255\255\255\255\
\255\255\078\001\079\001\080\001\081\001\255\255\083\001\255\255\
\118\001\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\255\255\067\001\068\001\069\001\070\001\255\255\255\255\
\073\001\255\255\255\255\255\255\255\255\078\001\079\001\080\001\
\081\001\118\001\083\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\255\255\255\255\255\255\063\001\
\064\001\065\001\255\255\067\001\068\001\069\001\070\001\255\255\
\255\255\073\001\255\255\255\255\255\255\255\255\078\001\079\001\
\080\001\081\001\255\255\083\001\255\255\118\001\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\063\001\064\001\065\001\255\255\067\001\
\068\001\069\001\070\001\255\255\255\255\073\001\255\255\255\255\
\255\255\255\255\078\001\079\001\080\001\081\001\118\001\083\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\255\255\255\255\255\255\063\001\064\001\065\001\255\255\
\067\001\068\001\069\001\070\001\255\255\255\255\073\001\255\255\
\255\255\255\255\255\255\078\001\079\001\080\001\081\001\255\255\
\083\001\255\255\118\001\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\255\255\255\255\255\255\255\255\
\063\001\064\001\065\001\255\255\067\001\068\001\069\001\070\001\
\255\255\255\255\073\001\255\255\255\255\255\255\255\255\078\001\
\079\001\080\001\081\001\118\001\083\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\255\255\255\255\255\255\
\255\255\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\255\255\255\255\073\001\255\255\255\255\255\255\255\255\
\078\001\079\001\080\001\081\001\255\255\083\001\255\255\118\001\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\255\255\255\255\255\255\255\255\063\001\064\001\065\001\
\255\255\067\001\068\001\069\001\070\001\255\255\255\255\073\001\
\255\255\255\255\255\255\255\255\078\001\079\001\080\001\081\001\
\118\001\083\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\255\255\255\255\255\255\255\255\063\001\064\001\
\065\001\255\255\067\001\068\001\255\255\255\255\255\255\255\255\
\073\001\255\255\255\255\255\255\255\255\078\001\079\001\080\001\
\081\001\255\255\083\001\255\255\118\001\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\255\255\255\255\255\255\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\068\001\
\255\255\255\255\255\255\255\255\073\001\255\255\255\255\255\255\
\255\255\078\001\079\001\080\001\081\001\118\001\083\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\255\255\255\255\
\255\255\255\255\255\255\063\001\064\001\065\001\255\255\067\001\
\068\001\255\255\255\255\255\255\255\255\073\001\255\255\255\255\
\255\255\255\255\078\001\079\001\080\001\081\001\255\255\083\001\
\255\255\118\001\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\063\001\
\064\001\065\001\255\255\067\001\068\001\255\255\255\255\255\255\
\255\255\073\001\255\255\255\255\255\255\255\255\078\001\079\001\
\080\001\081\001\118\001\083\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\255\255\255\255\255\255\255\255\
\063\001\064\001\065\001\255\255\067\001\068\001\255\255\255\255\
\255\255\255\255\073\001\051\001\052\001\255\255\255\255\078\001\
\079\001\080\001\081\001\255\255\083\001\255\255\118\001\063\001\
\064\001\065\001\255\255\067\001\068\001\255\255\255\255\255\255\
\255\255\073\001\051\001\052\001\255\255\255\255\078\001\079\001\
\080\001\081\001\255\255\083\001\255\255\255\255\063\001\064\001\
\065\001\255\255\067\001\068\001\255\255\255\255\255\255\118\001\
\073\001\255\255\255\255\255\255\255\255\078\001\079\001\080\001\
\081\001\255\255\083\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\118\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\118\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\255\255\077\001\255\255\079\001\
\255\255\081\001\255\255\083\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\255\255\255\255\077\001\255\255\255\255\080\001\081\001\
\255\255\083\001"

let yynames_const = "\
  EOF\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  SLASH\000\
  PERCENT\000\
  PIPE\000\
  CIRC\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  ELSE\000\
  LABEL__\000\
  BUILTIN_VA_LIST\000\
  BLOCKATTRIBUTE\000\
  PRAGMA_EOL\000\
  AT_NAME\000\
  "

let yynames_block = "\
  IDENT\000\
  QUALIFIER\000\
  CST_CHAR\000\
  CST_WCHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  NAMED_TYPE\000\
  CST_STRING\000\
  CST_WSTRING\000\
  CHAR\000\
  INT\000\
  BOOL\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  INT64\000\
  INT32\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  STATIC_ASSERT\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  RESTRICT\000\
  AUTO\000\
  REGISTER\000\
  COMPLEX\000\
  THREAD\000\
  SIZEOF\000\
  ALIGNOF\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  TILDE\000\
  AND\000\
  EXCLAM\000\
  AND_AND\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  SEMICOLON\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  TRY\000\
  EXCEPT\000\
  FINALLY\000\
  ATTRIBUTE\000\
  INLINE\000\
  NORETURN\000\
  ASM\000\
  TYPEOF\000\
  FUNCTION__\000\
  PRETTY_FUNCTION__\000\
  BUILTIN_VA_ARG\000\
  ATTRIBUTE_USED\000\
  BUILTIN_TYPES_COMPAT\000\
  BUILTIN_OFFSETOF\000\
  DECLSPEC\000\
  MSASM\000\
  MSATTR\000\
  PRAGMA_LINE\000\
  PRAGMA\000\
  AT_TRANSFORM\000\
  AT_TRANSFORMEXPR\000\
  AT_SPECIFIER\000\
  AT_EXPR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 397 "src/frontc/cparser.mly"
              (_1)
# 2820 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 399 "src/frontc/cparser.mly"
                 (_1)
# 2827 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 402 "src/frontc/cparser.mly"
                                        ( [] )
# 2833 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 403 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 2841 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 404 "src/frontc/cparser.mly"
                                        ( _2 )
# 2849 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "src/frontc/cparser.mly"
                               ( currentLoc () )
# 2855 "src/frontc/cparser.ml"
               : Cabs.cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 413 "src/frontc/cparser.mly"
                                        ( _1 )
# 2862 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 414 "src/frontc/cparser.mly"
                                        ( _1 )
# 2869 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 417 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), [ _3 ]) )
# 2878 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 419 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), _4)  )
# 2889 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 421 "src/frontc/cparser.mly"
                                        ( GLOBASM (fst _3, (*handleLoc*) _1) )
# 2899 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma) in
    Obj.repr(
# 422 "src/frontc/cparser.mly"
                                        ( _1 )
# 2906 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 427 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             doDeclaration ((*handleLoc*) (snd _1)) []
                               [((fst _1, PROTO(JUSTBASE, pardecl,isva), [], cabslu),
                                 NO_INIT)]
                            )
# 2923 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 436 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             doDeclaration ((*handleLoc*)(snd _1)) []
                               [((fst _1, PROTO(JUSTBASE,[],false), [], cabslu),
                                 NO_INIT)]
                            )
# 2936 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 442 "src/frontc/cparser.mly"
                                                                        (
    checkConnective(fst _5);
    TRANSFORMER(_3, _7, _1)
  )
# 2953 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 447 "src/frontc/cparser.mly"
                                                                                   (
    checkConnective(fst _5);
    EXPRTRANSFORMER(fst _3, fst _7, _1)
  )
# 2970 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 452 "src/frontc/cparser.mly"
                           ( PRAGMA (NOTHING, _1) )
# 2978 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 456 "src/frontc/cparser.mly"
             (fst _1)
# 2985 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 457 "src/frontc/cparser.mly"
                  (fst _1)
# 2992 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 458 "src/frontc/cparser.mly"
                                        ( "@name(" ^ fst _3 ^ ")" )
# 3000 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 462 "src/frontc/cparser.mly"
                                        ( () )
# 3006 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 463 "src/frontc/cparser.mly"
                                        ( () )
# 3012 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 470 "src/frontc/cparser.mly"
          (VARIABLE (fst _1), snd _1)
# 3019 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant * cabsloc) in
    Obj.repr(
# 472 "src/frontc/cparser.mly"
          (CONSTANT (fst _1), snd _1)
# 3026 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 474 "src/frontc/cparser.mly"
          (PAREN (smooth_expression (fst _1)), snd _1)
# 3033 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 476 "src/frontc/cparser.mly"
          ( GNU_BODY (fst3 _2), _1 )
# 3041 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 480 "src/frontc/cparser.mly"
                         ( EXPR_PATTERN(fst _3), _1 )
# 3050 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 485 "src/frontc/cparser.mly"
                        ( _1 )
# 3057 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 487 "src/frontc/cparser.mly"
   (INDEX (fst _1, smooth_expression _2), snd _1)
# 3065 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 489 "src/frontc/cparser.mly"
   (CALL (fst _1, _3), snd _1)
# 3074 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 491 "src/frontc/cparser.mly"
                        ( let b, d = _5 in
                          CALL (VARIABLE "__builtin_va_arg",
                                [fst _3; TYPE_SIZEOF (b, d)]), _1 )
# 3086 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 495 "src/frontc/cparser.mly"
                        ( let b1,d1 = _3 in
                          let b2,d2 = _5 in
                          CALL (VARIABLE "__builtin_types_compatible_p",
                                [TYPE_SIZEOF(b1,d1); TYPE_SIZEOF(b2,d2)]), _1 )
# 3099 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    Obj.repr(
# 500 "src/frontc/cparser.mly"
                        ( transformOffsetOf _3 _5, _1 )
# 3109 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 502 "src/frontc/cparser.mly"
          (MEMBEROF (fst _1, _3), snd _1)
# 3117 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 504 "src/frontc/cparser.mly"
          (MEMBEROFPTR (fst _1, _3), snd _1)
# 3125 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 506 "src/frontc/cparser.mly"
          (UNARY (POSINCR, fst _1), snd _1)
# 3133 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 508 "src/frontc/cparser.mly"
          (UNARY (POSDECR, fst _1), snd _1)
# 3141 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 511 "src/frontc/cparser.mly"
          ( CAST(_2, COMPOUND_INIT _5), _1 )
# 3152 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 516 "src/frontc/cparser.mly"
          ( VARIABLE (_1) )
# 3159 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'offsetof_member_designator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 518 "src/frontc/cparser.mly"
   ( MEMBEROF (_1, fst _3) )
# 3167 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 520 "src/frontc/cparser.mly"
   ( INDEX (_1, smooth_expression _2) )
# 3175 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 525 "src/frontc/cparser.mly"
                        ( _1 )
# 3182 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 527 "src/frontc/cparser.mly"
          (UNARY (PREINCR, fst _2), _1)
# 3190 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 529 "src/frontc/cparser.mly"
          (UNARY (PREDECR, fst _2), _1)
# 3198 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 531 "src/frontc/cparser.mly"
          (EXPR_SIZEOF (fst _2), _1)
# 3206 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 533 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_SIZEOF (b, d), _1)
# 3215 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 535 "src/frontc/cparser.mly"
          (EXPR_ALIGNOF (fst _2), _1)
# 3223 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 537 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_ALIGNOF (b, d), _1)
# 3232 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 539 "src/frontc/cparser.mly"
          (UNARY (PLUS, fst _2), _1)
# 3240 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 541 "src/frontc/cparser.mly"
          (UNARY (MINUS, fst _2), _1)
# 3248 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 543 "src/frontc/cparser.mly"
          (UNARY (MEMOF, fst _2), _1)
# 3256 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 545 "src/frontc/cparser.mly"
          (UNARY (ADDROF, fst _2), _1)
# 3264 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 547 "src/frontc/cparser.mly"
          (UNARY (NOT, fst _2), _1)
# 3272 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 549 "src/frontc/cparser.mly"
          (UNARY (BNOT, fst _2), _1)
# 3280 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 550 "src/frontc/cparser.mly"
                               ( LABELADDR (fst _2), _1 )
# 3288 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 555 "src/frontc/cparser.mly"
                         ( _1 )
# 3295 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 557 "src/frontc/cparser.mly"
           ( CAST(_2, SINGLE_INIT (fst _4)), _1 )
# 3304 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 562 "src/frontc/cparser.mly"
                         ( _1 )
# 3311 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 564 "src/frontc/cparser.mly"
   (BINARY(MUL, fst _1, fst _3), snd _1)
# 3320 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 566 "src/frontc/cparser.mly"
   (BINARY(DIV, fst _1, fst _3), snd _1)
# 3328 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 568 "src/frontc/cparser.mly"
   (BINARY(MOD, fst _1, fst _3), snd _1)
# 3336 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 573 "src/frontc/cparser.mly"
                        ( _1 )
# 3343 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 575 "src/frontc/cparser.mly"
   (BINARY(ADD, fst _1, fst _3), snd _1)
# 3352 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 577 "src/frontc/cparser.mly"
   (BINARY(SUB, fst _1, fst _3), snd _1)
# 3361 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 582 "src/frontc/cparser.mly"
                         ( _1 )
# 3368 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 584 "src/frontc/cparser.mly"
   (BINARY(SHL, fst _1, fst _3), snd _1)
# 3376 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 586 "src/frontc/cparser.mly"
   (BINARY(SHR, fst _1, fst _3), snd _1)
# 3384 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 592 "src/frontc/cparser.mly"
                        ( _1 )
# 3391 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 594 "src/frontc/cparser.mly"
   (BINARY(LT, fst _1, fst _3), snd _1)
# 3399 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 596 "src/frontc/cparser.mly"
   (BINARY(GT, fst _1, fst _3), snd _1)
# 3407 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 598 "src/frontc/cparser.mly"
   (BINARY(LE, fst _1, fst _3), snd _1)
# 3415 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 600 "src/frontc/cparser.mly"
   (BINARY(GE, fst _1, fst _3), snd _1)
# 3423 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 605 "src/frontc/cparser.mly"
                        ( _1 )
# 3430 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 607 "src/frontc/cparser.mly"
   (BINARY(EQ, fst _1, fst _3), snd _1)
# 3438 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 609 "src/frontc/cparser.mly"
   (BINARY(NE, fst _1, fst _3), snd _1)
# 3446 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 615 "src/frontc/cparser.mly"
                       ( _1 )
# 3453 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 617 "src/frontc/cparser.mly"
   (BINARY(BAND, fst _1, fst _3), snd _1)
# 3462 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 622 "src/frontc/cparser.mly"
                       ( _1 )
# 3469 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 624 "src/frontc/cparser.mly"
   (BINARY(XOR, fst _1, fst _3), snd _1)
# 3477 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 629 "src/frontc/cparser.mly"
                        ( _1 )
# 3484 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 631 "src/frontc/cparser.mly"
   (BINARY(BOR, fst _1, fst _3), snd _1)
# 3492 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 636 "src/frontc/cparser.mly"
                        ( _1 )
# 3499 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 638 "src/frontc/cparser.mly"
   (BINARY(AND, fst _1, fst _3), snd _1)
# 3508 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 643 "src/frontc/cparser.mly"
                        ( _1 )
# 3515 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 645 "src/frontc/cparser.mly"
   (BINARY(OR, fst _1, fst _3), snd _1)
# 3523 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_expression) in
    Obj.repr(
# 650 "src/frontc/cparser.mly"
                         ( _1 )
# 3530 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 652 "src/frontc/cparser.mly"
   (QUESTION (fst _1, _3, fst _5), snd _1)
# 3539 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 660 "src/frontc/cparser.mly"
                         ( _1 )
# 3546 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 662 "src/frontc/cparser.mly"
   (BINARY(ASSIGN, fst _1, fst _3), snd _1)
# 3554 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 664 "src/frontc/cparser.mly"
   (BINARY(ADD_ASSIGN, fst _1, fst _3), snd _1)
# 3562 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 666 "src/frontc/cparser.mly"
   (BINARY(SUB_ASSIGN, fst _1, fst _3), snd _1)
# 3570 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 668 "src/frontc/cparser.mly"
   (BINARY(MUL_ASSIGN, fst _1, fst _3), snd _1)
# 3578 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 670 "src/frontc/cparser.mly"
   (BINARY(DIV_ASSIGN, fst _1, fst _3), snd _1)
# 3586 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 672 "src/frontc/cparser.mly"
   (BINARY(MOD_ASSIGN, fst _1, fst _3), snd _1)
# 3594 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 674 "src/frontc/cparser.mly"
   (BINARY(BAND_ASSIGN, fst _1, fst _3), snd _1)
# 3602 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 676 "src/frontc/cparser.mly"
   (BINARY(BOR_ASSIGN, fst _1, fst _3), snd _1)
# 3610 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 678 "src/frontc/cparser.mly"
   (BINARY(XOR_ASSIGN, fst _1, fst _3), snd _1)
# 3618 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 680 "src/frontc/cparser.mly"
   (BINARY(SHL_ASSIGN, fst _1, fst _3), snd _1)
# 3626 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 682 "src/frontc/cparser.mly"
   (BINARY(SHR_ASSIGN, fst _1, fst _3), snd _1)
# 3634 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 687 "src/frontc/cparser.mly"
                        ( _1 )
# 3641 "src/frontc/cparser.ml"
               : Cabs.expression * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 692 "src/frontc/cparser.mly"
               (CONST_INT (fst _1), snd _1)
# 3648 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 693 "src/frontc/cparser.mly"
                 (CONST_FLOAT (fst _1), snd _1)
# 3655 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 694 "src/frontc/cparser.mly"
                (CONST_CHAR (fst _1), snd _1)
# 3662 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 695 "src/frontc/cparser.mly"
                 (CONST_WCHAR (fst _1), snd _1)
# 3669 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 696 "src/frontc/cparser.mly"
                             (CONST_STRING (fst _1), snd _1)
# 3676 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 697 "src/frontc/cparser.mly"
                   (CONST_WSTRING (fst _1), snd _1)
# 3683 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list Queue.t * cabsloc) in
    Obj.repr(
# 703 "src/frontc/cparser.mly"
                                        (
     let queue, location = _1 in
     let buffer = Buffer.create (Queue.length queue) in
     Queue.iter
       (List.iter
	  (fun value ->
	    let char = int64_to_char value in
	    Buffer.add_char buffer char))
       queue;
     Buffer.contents buffer, location
   )
# 3700 "src/frontc/cparser.ml"
               : string * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 717 "src/frontc/cparser.mly"
                                        (intlist_to_string (fst _1) )
# 3707 "src/frontc/cparser.ml"
               : 'one_string_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 720 "src/frontc/cparser.mly"
                                        (
      let queue = Queue.create () in
      Queue.add (fst _1) queue;
      queue, snd _1
    )
# 3718 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 725 "src/frontc/cparser.mly"
                                        (
      Queue.add (fst _2) (fst _1);
      _1
    )
# 3729 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 732 "src/frontc/cparser.mly"
                                        ( _1 )
# 3736 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 733 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3744 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 734 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3752 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 739 "src/frontc/cparser.mly"
                  (_1)
# 3759 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 740 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts
					    !currentFunctionName), _1)
# 3767 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 742 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts
					    !currentFunctionName), _1)
# 3775 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 747 "src/frontc/cparser.mly"
                        ( SINGLE_INIT (fst _1) )
# 3782 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 749 "src/frontc/cparser.mly"
   ( COMPOUND_INIT _2)
# 3791 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat * Cabs.init_expression) in
    Obj.repr(
# 752 "src/frontc/cparser.mly"
                                            ( [_1] )
# 3798 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat * Cabs.init_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initializer_list_opt) in
    Obj.repr(
# 753 "src/frontc/cparser.mly"
                                            ( _1 :: _3 )
# 3806 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 756 "src/frontc/cparser.mly"
                                            ( [] )
# 3812 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.initwhat * Cabs.init_expression) list) in
    Obj.repr(
# 757 "src/frontc/cparser.mly"
                                            ( _1 )
# 3819 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'eq_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 760 "src/frontc/cparser.mly"
                                            ( (_1, _3) )
# 3828 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gcc_init_designators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 761 "src/frontc/cparser.mly"
                                         ( (_1, _2) )
# 3836 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 762 "src/frontc/cparser.mly"
                                        ( (NEXT_INIT, _1) )
# 3843 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 765 "src/frontc/cparser.mly"
                             ( () )
# 3849 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 767 "src/frontc/cparser.mly"
                                 ( () )
# 3855 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 770 "src/frontc/cparser.mly"
                                                 ( INFIELD_INIT(_2, _3) )
# 3863 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 772 "src/frontc/cparser.mly"
                                        ( ATINDEX_INIT(fst _2, _4) )
# 3871 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 774 "src/frontc/cparser.mly"
                                        ( ATINDEXRANGE_INIT(fst _2, fst _4) )
# 3879 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    Obj.repr(
# 777 "src/frontc/cparser.mly"
                                        ( NEXT_INIT )
# 3885 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 778 "src/frontc/cparser.mly"
                                        ( _1 )
# 3892 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    Obj.repr(
# 782 "src/frontc/cparser.mly"
                                        ( INFIELD_INIT(_1, NEXT_INIT) )
# 3899 "src/frontc/cparser.ml"
               : 'gcc_init_designators))
; (fun __caml_parser_env ->
    Obj.repr(
# 786 "src/frontc/cparser.mly"
                                    ( [] )
# 3905 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 787 "src/frontc/cparser.mly"
                                    ( fst _1 )
# 3912 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 792 "src/frontc/cparser.mly"
          (NOTHING)
# 3918 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 794 "src/frontc/cparser.mly"
          (smooth_expression (fst _1))
# 3925 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 798 "src/frontc/cparser.mly"
                                           ([fst _1], snd _1)
# 3932 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 799 "src/frontc/cparser.mly"
                                                  ( fst _1 :: fst _3, snd _1 )
# 3940 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 800 "src/frontc/cparser.mly"
                                                  ( _3 )
# 3947 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 804 "src/frontc/cparser.mly"
                                    ( NOTHING )
# 3953 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 805 "src/frontc/cparser.mly"
                                    ( smooth_expression (fst _1) )
# 3960 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 809 "src/frontc/cparser.mly"
                                                   ( _2 )
# 3968 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 810 "src/frontc/cparser.mly"
                                                   ( [], _1 )
# 3975 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 814 "src/frontc/cparser.mly"
                                                       ( fst _2 )
# 3982 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 815 "src/frontc/cparser.mly"
                                                       ( [] )
# 3988 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'block_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block_attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 822 "src/frontc/cparser.mly"
                                         (!Lexerhack.pop_context();
                                          { blabels = _2;
                                            battrs = _3;
                                            bstmts = _4 },
					    _1, _5
                                         )
# 4004 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 828 "src/frontc/cparser.mly"
                                         ( { blabels = [];
                                             battrs  = [];
                                             bstmts  = [] },
					     _2, _3
                                         )
# 4016 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 835 "src/frontc/cparser.mly"
                           (!Lexerhack.push_context (); _1)
# 4023 "src/frontc/cparser.ml"
               : 'block_begin))
; (fun __caml_parser_env ->
    Obj.repr(
# 839 "src/frontc/cparser.mly"
                                                            ( [] )
# 4029 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 841 "src/frontc/cparser.mly"
                                        ( [("__blockattribute__", _2)] )
# 4036 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 846 "src/frontc/cparser.mly"
                                         ( [] )
# 4042 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 847 "src/frontc/cparser.mly"
                                         ( DEFINITION(_1) :: _2 )
# 4050 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 848 "src/frontc/cparser.mly"
                                         ( _1 :: _2 )
# 4058 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 850 "src/frontc/cparser.mly"
                                         ( [ LABEL (fst _1, NOP (snd _1),
                                                    snd _1)] )
# 4066 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 852 "src/frontc/cparser.mly"
                                         ( _2 )
# 4074 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 856 "src/frontc/cparser.mly"
                                                     ( [] )
# 4080 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 857 "src/frontc/cparser.mly"
                                                     ( _2 @ _4 )
# 4089 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 860 "src/frontc/cparser.mly"
                                         ( [ fst _1 ] )
# 4096 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 861 "src/frontc/cparser.mly"
                                         ( fst _1 :: _3 )
# 4104 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 867 "src/frontc/cparser.mly"
               (NOP ((*handleLoc*) _1) )
# 4111 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 869 "src/frontc/cparser.mly"
          (COMPUTATION (smooth_expression (fst _1), (*handleLoc*)(snd _1)))
# 4119 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 870 "src/frontc/cparser.mly"
                        (BLOCK (fst3 _1, (*handleLoc*)(snd3 _1)))
# 4126 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 872 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, NOP _1, _1))
# 4135 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 874 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, _5, (*handleLoc*) _1))
# 4145 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 876 "src/frontc/cparser.mly"
                        (SWITCH (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4154 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 878 "src/frontc/cparser.mly"
          (WHILE (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4163 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 880 "src/frontc/cparser.mly"
                   (DOWHILE (smooth_expression (fst _4), _2, (*handleLoc*) _1))
# 4174 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'for_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 883 "src/frontc/cparser.mly"
                          (FOR (_3, _4, _6, _8, (*handleLoc*) _1))
# 4187 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 885 "src/frontc/cparser.mly"
                   ((* The only attribute that should appear here
                                     is "unused". For now, we drop this on the
                                     floor, since unused labels are usually
                                     removed anyways by Rmtmps. *)
                                  LABEL (fst _1, _4, (snd _1)))
# 4200 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 891 "src/frontc/cparser.mly"
                          (CASE (fst _2, _4, (*handleLoc*) _1))
# 4209 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 893 "src/frontc/cparser.mly"
                          (CASERANGE (fst _2, fst _4, _6, (*handleLoc*) _1))
# 4219 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 895 "src/frontc/cparser.mly"
                          (DEFAULT (_3, (*handleLoc*) _1))
# 4227 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 896 "src/frontc/cparser.mly"
                       (RETURN (NOTHING, (*handleLoc*) _1))
# 4235 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 898 "src/frontc/cparser.mly"
                          (RETURN (smooth_expression (fst _2), (*handleLoc*) _1))
# 4244 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 899 "src/frontc/cparser.mly"
                        (BREAK ((*handleLoc*) _1))
# 4252 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 900 "src/frontc/cparser.mly"
                        (CONTINUE ((*handleLoc*) _1))
# 4260 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 902 "src/frontc/cparser.mly"
                   (GOTO (fst _2, (*handleLoc*) _1))
# 4269 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 904 "src/frontc/cparser.mly"
                                 ( COMPGOTO (smooth_expression (fst _3), (*handleLoc*) _1) )
# 4279 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 906 "src/frontc/cparser.mly"
                        ( ASM (_2, _4, _5, (*handleLoc*) _1) )
# 4291 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 907 "src/frontc/cparser.mly"
                        ( ASM ([], [fst _1], None, (*handleLoc*)(snd _1)))
# 4298 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 909 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _5 in
                          if not !Cprint.msvcMode then
                            (* parse_error "try/except in GCC code"; *)
                            (* We don't want to parse_error here, because
                             * we want to be able to parse the code, even if
                             * we don't support it. *)
                            ();
                          TRY_EXCEPT (b, COMMA (fst _4), h, (*handleLoc*) _1) )
# 4317 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 919 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _4 in
                          if not !Cprint.msvcMode then
                            (* parse_error "try/finally in GCC code"; *)
                            ();
                          TRY_FINALLY (b, h, (*handleLoc*) _1) )
# 4332 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 926 "src/frontc/cparser.mly"
                                 ( (NOP _2))
# 4340 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 931 "src/frontc/cparser.mly"
                                 ( FC_EXP _1 )
# 4348 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 932 "src/frontc/cparser.mly"
                                 ( FC_DECL _1 )
# 4355 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 937 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) _2 )
# 4364 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 939 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) [] )
# 4372 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 941 "src/frontc/cparser.mly"
                                       ( STATIC_ASSERT_DECLARATION ((fst _3), (fst _5), _1) )
# 4383 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 944 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 4390 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.init_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name list) in
    Obj.repr(
# 945 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 4398 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 949 "src/frontc/cparser.mly"
                                        ( (_1, NO_INIT) )
# 4405 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 951 "src/frontc/cparser.mly"
                                        ( (_1, _3) )
# 4413 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 956 "src/frontc/cparser.mly"
                                        ( SpecTypedef :: _2, _1  )
# 4421 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 957 "src/frontc/cparser.mly"
                                        ( SpecStorage EXTERN :: _2, _1 )
# 4429 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 958 "src/frontc/cparser.mly"
                                        ( SpecStorage STATIC :: _2, _1 )
# 4437 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 959 "src/frontc/cparser.mly"
                                        ( SpecStorage AUTO :: _2, _1 )
# 4445 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 960 "src/frontc/cparser.mly"
                                        ( SpecStorage REGISTER :: _2, _1)
# 4453 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 962 "src/frontc/cparser.mly"
                                          ( SpecType (fst _1) :: _2, snd _1 )
# 4461 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 964 "src/frontc/cparser.mly"
                                        ( SpecInline :: _2, _1 )
# 4469 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 965 "src/frontc/cparser.mly"
                                        ( SpecNoreturn :: _2, _1 )
# 4477 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 966 "src/frontc/cparser.mly"
                                        ( (fst _1) :: _2, snd _1 )
# 4485 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 967 "src/frontc/cparser.mly"
                                        ( SpecAttr (fst _1) :: _2, snd _1 )
# 4493 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 969 "src/frontc/cparser.mly"
                                        ( [ SpecPattern(fst _3) ], _1 )
# 4502 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 974 "src/frontc/cparser.mly"
                                        ( [] )
# 4508 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 975 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4515 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 982 "src/frontc/cparser.mly"
                                        ( [] )
# 4521 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 983 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4528 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 986 "src/frontc/cparser.mly"
                    ( Tvoid, _1)
# 4535 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 987 "src/frontc/cparser.mly"
                    ( Tchar, _1 )
# 4542 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 988 "src/frontc/cparser.mly"
                    ( Tbool, _1 )
# 4549 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 989 "src/frontc/cparser.mly"
                    ( Tshort, _1 )
# 4556 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 990 "src/frontc/cparser.mly"
                    ( Tint, _1 )
# 4563 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 991 "src/frontc/cparser.mly"
                    ( Tlong, _1 )
# 4570 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 992 "src/frontc/cparser.mly"
                    ( Tint64, _1 )
# 4577 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 993 "src/frontc/cparser.mly"
                    ( Tfloat, _1 )
# 4584 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 994 "src/frontc/cparser.mly"
                    ( Tdouble, _1 )
# 4591 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 995 "src/frontc/cparser.mly"
                    ( Tsigned, _1 )
# 4598 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 996 "src/frontc/cparser.mly"
                    ( Tunsigned, _1 )
# 4605 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 998 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, None,    []), _1 )
# 4613 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1000 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, None,    _2), _1 )
# 4622 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1002 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, Some _4, []), _1 )
# 4633 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1004 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _3, []), _1 )
# 4643 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1006 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, Some _5, _2), _1 )
# 4655 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1008 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _4, _2), _1 )
# 4666 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1010 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, None,    []), _1 )
# 4674 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1012 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, Some _4, []), _1 )
# 4685 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1014 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _3, []), _1 )
# 4695 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1016 "src/frontc/cparser.mly"
                                                   ( Tunion  (_3, Some _5, _2), _1 )
# 4707 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1018 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _4, _2), _1 )
# 4718 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1020 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, None,    []), _1 )
# 4726 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1022 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, Some _4, []), _1 )
# 4738 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1024 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _3, []), _1 )
# 4749 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1026 "src/frontc/cparser.mly"
                                                   ( Tenum   (_3, Some _5, _2), _1 )
# 4762 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1028 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _4, _2), _1 )
# 4774 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1029 "src/frontc/cparser.mly"
                    ( Tnamed (fst _1), snd _1 )
# 4781 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1030 "src/frontc/cparser.mly"
                                        ( TtypeofE (fst _3), _1 )
# 4790 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1031 "src/frontc/cparser.mly"
                                        ( let s, d = _3 in
                                          TtypeofT (s, d), _1 )
# 4800 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1037 "src/frontc/cparser.mly"
                                         ( [] )
# 4806 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1039 "src/frontc/cparser.mly"
                                         ( (fst _1,
                                            [(missingFieldDecl, None)]) :: _3 )
# 4816 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1043 "src/frontc/cparser.mly"
                                         ( _2 )
# 4824 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (Cabs.name * expression option) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1045 "src/frontc/cparser.mly"
                                          ( (fst _1, _2)
                                            :: _4 )
# 4835 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1048 "src/frontc/cparser.mly"
                                          ( _2 )
# 4843 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1051 "src/frontc/cparser.mly"
                                          ( _3 )
# 4851 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name * expression option) in
    Obj.repr(
# 1054 "src/frontc/cparser.mly"
                                         ( [_1] )
# 4858 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name * expression option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.name * expression option) list) in
    Obj.repr(
# 1055 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 4866 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1058 "src/frontc/cparser.mly"
                                    ( (_1, None) )
# 4873 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1060 "src/frontc/cparser.mly"
                                    ( let (n,decl,al,loc) = _1 in
                                      let al' = al @ _4 in
                                     ((n,decl,al',loc), Some (fst _3)) )
# 4884 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1063 "src/frontc/cparser.mly"
                                    ( (missingFieldDecl, Some (fst _2)) )
# 4891 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1067 "src/frontc/cparser.mly"
                  ([_1])
# 4898 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1068 "src/frontc/cparser.mly"
                                       (_1 @ [_3])
# 4906 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    Obj.repr(
# 1069 "src/frontc/cparser.mly"
                                        ( _1 )
# 4913 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1072 "src/frontc/cparser.mly"
            ((fst _1, NOTHING, snd _1))
# 4920 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1073 "src/frontc/cparser.mly"
                         ((fst _1, fst _3, snd _1))
# 4928 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1079 "src/frontc/cparser.mly"
                               ( let (n, decl) = _2 in
                                (n, applyPointer (fst _1) decl, _3, (snd _1)) )
# 4938 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1087 "src/frontc/cparser.mly"
                                   ( (_1, JUSTBASE) )
# 4945 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name) in
    Obj.repr(
# 1090 "src/frontc/cparser.mly"
                                   ( let (n,decl,al,loc) = _3 in
                                     (n, PARENTYPE(_2,decl,al)) )
# 4955 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1094 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, _4)) )
# 4965 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    Obj.repr(
# 1097 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, NOTHING)) )
# 4974 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1100 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     (n, PROTO(decl, params, isva))
                                   )
# 4987 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1107 "src/frontc/cparser.mly"
                                   ( !Lexerhack.push_context () )
# 4994 "src/frontc/cparser.ml"
               : 'parameter_list_startscope))
; (fun __caml_parser_env ->
    Obj.repr(
# 1110 "src/frontc/cparser.mly"
                                   ( ([], false) )
# 5000 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1111 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _2 in
                                     (_1 :: params, isva)
                                   )
# 5010 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1116 "src/frontc/cparser.mly"
                                        ( ([], false) )
# 5016 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1117 "src/frontc/cparser.mly"
                                        ( ([], true) )
# 5022 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1118 "src/frontc/cparser.mly"
                                        ( let (params, isva) = _3 in
                                          (_2 :: params, isva)
                                        )
# 5032 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1125 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) )
# 5040 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1126 "src/frontc/cparser.mly"
                                          ( let d, a = _2 in
                                            (fst _1, ("", d, a, cabslu)) )
# 5049 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1128 "src/frontc/cparser.mly"
                                          ( (fst _1, ("", JUSTBASE, [], cabslu)) )
# 5056 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    Obj.repr(
# 1129 "src/frontc/cparser.mly"
                                          ( _2 )
# 5064 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_old_proto_decl) in
    Obj.repr(
# 1134 "src/frontc/cparser.mly"
                                      ( let (n, decl, a) = _2 in
					  (n, applyPointer (fst _1) decl,
                                           a, snd _1)
                                      )
# 5075 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1143 "src/frontc/cparser.mly"
                                   ( let par_decl, isva = doOldParDecl _3 _5 in
                                     let n, decl = _1 in
                                     (n, PROTO(decl, par_decl, isva), [])
                                   )
# 5088 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1148 "src/frontc/cparser.mly"
                                   ( let n, decl = _1 in
                                     (n, PROTO(decl, [], false), [])
                                   )
# 5098 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1163 "src/frontc/cparser.mly"
                                               ( [fst _1] )
# 5105 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1164 "src/frontc/cparser.mly"
                                               ( let rest = _3 in
                                                 (fst _1 :: rest) )
# 5114 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1169 "src/frontc/cparser.mly"
                                          ( ([], false) )
# 5120 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1171 "src/frontc/cparser.mly"
                                          ( ([(fst _1, _2)], true) )
# 5129 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1173 "src/frontc/cparser.mly"
                                          ( let rest, isva = _4 in
                                            ((fst _1, _2) :: rest, isva)
                                          )
# 5141 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1179 "src/frontc/cparser.mly"
                                          ( [_1] )
# 5148 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 1180 "src/frontc/cparser.mly"
                                          ( _1 :: _3 )
# 5156 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    Obj.repr(
# 1181 "src/frontc/cparser.mly"
                                          ( [] )
# 5162 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1186 "src/frontc/cparser.mly"
                                ( _2 :: fst _3, _1 )
# 5171 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1189 "src/frontc/cparser.mly"
                                 ( let l = currentLoc () in
                                   ([], l) )
# 5178 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1191 "src/frontc/cparser.mly"
                                 ( _1 )
# 5185 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1195 "src/frontc/cparser.mly"
                               ( let d, a = _2 in
                                 if a <> [] then begin
                                   (* parse_error "attributes in type name";
                                   raise Parsing.Parse_error *)
                                   ()
                                 end;
                                 (fst _1, d)
                               )
# 5200 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1203 "src/frontc/cparser.mly"
                               ( (fst _1, JUSTBASE) )
# 5207 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1206 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) _2, _3 )
# 5216 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1207 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) JUSTBASE, [] )
# 5223 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1214 "src/frontc/cparser.mly"
                                   ( let d, a = _3 in
                                     PARENTYPE (_2, d, a)
                                   )
# 5234 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1219 "src/frontc/cparser.mly"
                                   ( JUSTBASE )
# 5241 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1222 "src/frontc/cparser.mly"
                                   ( ARRAY(_1, [], _3) )
# 5249 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1225 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     PROTO (_1, params, isva)
                                   )
# 5261 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type) in
    Obj.repr(
# 1231 "src/frontc/cparser.mly"
                                    ( _1 )
# 5268 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1232 "src/frontc/cparser.mly"
                                    ( JUSTBASE )
# 5274 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1236 "src/frontc/cparser.mly"
          ( let (loc, specs, decl) = _1 in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by
                                    * announceFunctionName *)
            doFunctionDef ((*handleLoc*) loc) (trd3 _2) specs decl (fst3 _2)
          )
# 5287 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1246 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5297 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1252 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5307 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1257 "src/frontc/cparser.mly"
                           ( let (params, isva) = _3 in
                             let fdec =
                               (fst _1, PROTO(JUSTBASE, params, isva), [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                           )
# 5323 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1268 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, pardecl,isva),
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 5343 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1281 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, [], false),
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 5359 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1294 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_CONST), _1 )
# 5366 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1295 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_VOLATILE), _1 )
# 5373 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1296 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_RESTRICT), _1 )
# 5380 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1297 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_COMPLEX), _1 )
# 5387 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1302 "src/frontc/cparser.mly"
                   ( [])
# 5393 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1303 "src/frontc/cparser.mly"
                                 ( fst _1 :: _2 )
# 5401 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1309 "src/frontc/cparser.mly"
                                        ( [] )
# 5407 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1310 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5415 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1312 "src/frontc/cparser.mly"
                                        ( ("__asm__",
					   [CONSTANT(CONST_STRING (fst _3))]) :: _5 )
# 5426 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1319 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3), _1 )
# 5435 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1324 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2), _1 )
# 5443 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1325 "src/frontc/cparser.mly"
                                        ( (fst _1, []), snd _1 )
# 5450 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1327 "src/frontc/cparser.mly"
                                        ( ("__thread",[]), _1 )
# 5457 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1328 "src/frontc/cparser.mly"
                                  (("__attribute__",[VARIABLE(fst _1)]),snd _1)
# 5464 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    Obj.repr(
# 1332 "src/frontc/cparser.mly"
                   ( [])
# 5470 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv_list) in
    Obj.repr(
# 1333 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5478 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1338 "src/frontc/cparser.mly"
                                        ( _1 )
# 5485 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1339 "src/frontc/cparser.mly"
                                        ( ("const", []), _1 )
# 5492 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1340 "src/frontc/cparser.mly"
                                        ( ("restrict",[]), _1 )
# 5499 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1341 "src/frontc/cparser.mly"
                                        ( ("volatile",[]), _1 )
# 5506 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1349 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3) )
# 5515 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1350 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2) )
# 5523 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'just_attribute) in
    Obj.repr(
# 1356 "src/frontc/cparser.mly"
                                        ( [_1] )
# 5530 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'just_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'just_attributes) in
    Obj.repr(
# 1357 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 5538 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1362 "src/frontc/cparser.mly"
                          ( PRAGMA (_2, _1) )
# 5546 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1363 "src/frontc/cparser.mly"
                                   ( PRAGMA (_2, _1) )
# 5555 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1364 "src/frontc/cparser.mly"
                                        ( PRAGMA (VARIABLE (fst _1),
                                                  snd _1) )
# 5563 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1371 "src/frontc/cparser.mly"
             ( VARIABLE (fst _1) )
# 5570 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1373 "src/frontc/cparser.mly"
                  ( VARIABLE (fst _1) )
# 5577 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1374 "src/frontc/cparser.mly"
                                        ( _2 )
# 5585 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1375 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), [VARIABLE (fst _2)]) )
# 5593 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1376 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_INT (fst _1)) )
# 5600 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1377 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_STRING (fst _1)) )
# 5607 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1381 "src/frontc/cparser.mly"
                                         ( VARIABLE "aconst" )
# 5614 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1383 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5622 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1387 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5630 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1389 "src/frontc/cparser.mly"
                                         ( VARIABLE ("default:" ^ fst _3) )
# 5638 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1394 "src/frontc/cparser.mly"
                                         ( VARIABLE ("__noreturn__") )
# 5645 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_attr) in
    Obj.repr(
# 1398 "src/frontc/cparser.mly"
                                         ( _1 )
# 5652 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1401 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), [VARIABLE ""]) )
# 5660 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1402 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), _2) )
# 5668 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1404 "src/frontc/cparser.mly"
                                         (MEMBEROFPTR (_1, _3))
# 5676 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1405 "src/frontc/cparser.mly"
                                         (MEMBEROF (_1, _3))
# 5684 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1406 "src/frontc/cparser.mly"
                                         (INDEX (_1, _3) )
# 5692 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_attr) in
    Obj.repr(
# 1413 "src/frontc/cparser.mly"
                                         ( _1 )
# 5699 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1414 "src/frontc/cparser.mly"
                                         (EXPR_SIZEOF (fst _2) )
# 5707 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1416 "src/frontc/cparser.mly"
                           (let b, d = _3 in TYPE_SIZEOF (b, d))
# 5716 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1418 "src/frontc/cparser.mly"
                                         (EXPR_ALIGNOF (fst _2) )
# 5724 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1419 "src/frontc/cparser.mly"
                                         (let b, d = _3 in TYPE_ALIGNOF (b, d))
# 5733 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1420 "src/frontc/cparser.mly"
                                        (UNARY (PLUS, _2))
# 5741 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1421 "src/frontc/cparser.mly"
                                        (UNARY (MINUS, _2))
# 5749 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1422 "src/frontc/cparser.mly"
                            (UNARY (MEMOF, _2))
# 5757 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1424 "src/frontc/cparser.mly"
                                 (UNARY (ADDROF, _2))
# 5765 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1425 "src/frontc/cparser.mly"
                                 (UNARY (NOT, _2))
# 5773 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1426 "src/frontc/cparser.mly"
                                        (UNARY (BNOT, _2))
# 5781 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_attr) in
    Obj.repr(
# 1430 "src/frontc/cparser.mly"
                                         ( _1 )
# 5788 "src/frontc/cparser.ml"
               : 'cast_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1434 "src/frontc/cparser.mly"
                                        ( _1 )
# 5795 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1435 "src/frontc/cparser.mly"
                                        (BINARY(MUL ,_1 , _3))
# 5804 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1436 "src/frontc/cparser.mly"
                                          (BINARY(DIV ,_1 , _3))
# 5812 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1437 "src/frontc/cparser.mly"
                                          (BINARY(MOD ,_1 , _3))
# 5820 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1442 "src/frontc/cparser.mly"
                                        ( _1 )
# 5827 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1443 "src/frontc/cparser.mly"
                                            (BINARY(ADD ,_1 , _3))
# 5836 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1444 "src/frontc/cparser.mly"
                                            (BINARY(SUB ,_1 , _3))
# 5845 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1448 "src/frontc/cparser.mly"
                                        ( _1 )
# 5852 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1449 "src/frontc/cparser.mly"
                                     (BINARY(SHL ,_1 , _3))
# 5860 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1450 "src/frontc/cparser.mly"
                                     (BINARY(SHR ,_1 , _3))
# 5868 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1454 "src/frontc/cparser.mly"
                                        ( _1 )
# 5875 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1455 "src/frontc/cparser.mly"
                                   (BINARY(LT ,_1 , _3))
# 5883 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1456 "src/frontc/cparser.mly"
                                   (BINARY(GT ,_1 , _3))
# 5891 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1457 "src/frontc/cparser.mly"
                                      (BINARY(LE ,_1 , _3))
# 5899 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1458 "src/frontc/cparser.mly"
                                      (BINARY(GE ,_1 , _3))
# 5907 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1462 "src/frontc/cparser.mly"
                                        ( _1 )
# 5914 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1463 "src/frontc/cparser.mly"
                                            (BINARY(EQ ,_1 , _3))
# 5922 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1464 "src/frontc/cparser.mly"
                                            (BINARY(NE ,_1 , _3))
# 5930 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1469 "src/frontc/cparser.mly"
                                        ( _1 )
# 5937 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1470 "src/frontc/cparser.mly"
                                       (BINARY(BAND ,_1 , _3))
# 5946 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1474 "src/frontc/cparser.mly"
                                           ( _1 )
# 5953 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1475 "src/frontc/cparser.mly"
                                           (BINARY(XOR ,_1 , _3))
# 5961 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1479 "src/frontc/cparser.mly"
                                          ( _1 )
# 5968 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1480 "src/frontc/cparser.mly"
                                          (BINARY(BOR ,_1 , _3))
# 5976 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1484 "src/frontc/cparser.mly"
                                                ( _1 )
# 5983 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1485 "src/frontc/cparser.mly"
                                             (BINARY(AND ,_1 , _3))
# 5992 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1489 "src/frontc/cparser.mly"
                                               ( _1 )
# 5999 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1490 "src/frontc/cparser.mly"
                                               (BINARY(OR ,_1 , _3))
# 6007 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_attr) in
    Obj.repr(
# 1494 "src/frontc/cparser.mly"
                                           ( _1 )
# 6014 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_attr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1497 "src/frontc/cparser.mly"
                                          ( QUESTION(_1, _3, _5) )
# 6023 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1500 "src/frontc/cparser.mly"
                                          ( _1 )
# 6030 "src/frontc/cparser.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 1504 "src/frontc/cparser.mly"
                                         ( [_1] )
# 6037 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1505 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 6045 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1506 "src/frontc/cparser.mly"
                                         ( _3 )
# 6052 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1509 "src/frontc/cparser.mly"
                                         ( [] )
# 6058 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1510 "src/frontc/cparser.mly"
                                         ( _1 )
# 6065 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list_ne) in
    Obj.repr(
# 1513 "src/frontc/cparser.mly"
                                         ( _2 )
# 6073 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1514 "src/frontc/cparser.mly"
                                         ( [] )
# 6080 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list) in
    Obj.repr(
# 1517 "src/frontc/cparser.mly"
                                         ( _2 )
# 6088 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1518 "src/frontc/cparser.mly"
                                         ( [] )
# 6095 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1522 "src/frontc/cparser.mly"
                                        ( [] )
# 6101 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1523 "src/frontc/cparser.mly"
                                        ( ("volatile", []) :: _2 )
# 6109 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1524 "src/frontc/cparser.mly"
                                        ( ("const", []) :: _2 )
# 6117 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1527 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 6124 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'one_string_constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmtemplate) in
    Obj.repr(
# 1528 "src/frontc/cparser.mly"
                                                 ( _1 :: _2 )
# 6132 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    Obj.repr(
# 1531 "src/frontc/cparser.mly"
                        ( None )
# 6138 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asminputs) in
    Obj.repr(
# 1533 "src/frontc/cparser.mly"
                        ( let (ins, clobs) = _3 in
                          Some {aoutputs = _2; ainputs = ins; aclobbers = clobs} )
# 6147 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1537 "src/frontc/cparser.mly"
                                        ( [] )
# 6153 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperandsne) in
    Obj.repr(
# 1538 "src/frontc/cparser.mly"
                                        ( List.rev _1 )
# 6160 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1541 "src/frontc/cparser.mly"
                                        ( [_1] )
# 6167 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asmoperandsne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1542 "src/frontc/cparser.mly"
                                        ( _3 :: _1 )
# 6175 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1545 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, fst _4) )
# 6185 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1546 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, NOTHING ) )
# 6194 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    Obj.repr(
# 1549 "src/frontc/cparser.mly"
                             ( ([], []) )
# 6200 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobber) in
    Obj.repr(
# 1551 "src/frontc/cparser.mly"
                        ( (_2, _3) )
# 6208 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1554 "src/frontc/cparser.mly"
                                        ( None )
# 6214 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 1555 "src/frontc/cparser.mly"
                                        ( Some (fst _2) )
# 6221 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    Obj.repr(
# 1559 "src/frontc/cparser.mly"
                                        ( [] )
# 6227 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst) in
    Obj.repr(
# 1560 "src/frontc/cparser.mly"
                                        ( _2 )
# 6234 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    Obj.repr(
# 1563 "src/frontc/cparser.mly"
                                        ( [] )
# 6240 "src/frontc/cparser.ml"
               : 'asmcloberlst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1564 "src/frontc/cparser.mly"
                                        ( _1 )
# 6247 "src/frontc/cparser.ml"
               : 'asmcloberlst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1567 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 6254 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'one_string_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1568 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 6262 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   try (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
   (* don't exit but continue, don't raise error *)
    with _ -> []
    
      
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1572 "src/frontc/cparser.mly"



# 6295 "src/frontc/cparser.ml"
